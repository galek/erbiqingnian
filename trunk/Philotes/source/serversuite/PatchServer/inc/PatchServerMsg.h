#include "sha1.h"
#include "svrstd.h"

#ifndef _NETMSG_H_
#include "netmsg.h"
#endif

#include "net.h"

#include "ServerConfiguration.h"
#include "ServerSpecification.h"

#ifndef _PATCH_CMD_HDR_
#define _PATCH_CMD_HDR_
#include "PatchServerCmdHdr.h"
#endif // _PATCH_CMD_HDR_

#define PATCH_CLIENT_VERSION_LARGE_MSG_SIZE			6
#define PATCH_CLIENT_VERSION_QUEUE_POSITION_MSG		7
#define PATCH_CLIENT_VERSION_KEEP_ALIVE_MSG			8
#define PATCH_CLIENT_CURRENT_VERSION				PATCH_CLIENT_VERSION_KEEP_ALIVE_MSG


#define PATCH_CLIENT_ACKS_PER_SECOND				75
#define PATCH_CLIENT_MAX_ACK_TOKEN_COUNT			225

#if ISVERSION(SERVER_VERSION)
#ifndef _PATCH_SERVER_CMD_TABLE_H_
#define _PATCH_SERVER_CMD_TABLE_H_

#define SIZE_THRESHOLD (0x400)

NET_COMMAND_TABLE* PatchServerGetRequestTbl(void);
NET_COMMAND_TABLE* PatchServerGetResponseTbl(void);


void PatchServerGetFileSHA_W(
							 LPVOID			svrContext,
							 SERVICEUSERID	sender,
							 MSG_STRUCT *	msg,
							 LPVOID			cltContext);

void PatchServerGetFileSHA_A(
							 LPVOID			svrContext,
							 SERVICEUSERID	sender,
							 MSG_STRUCT *	msg,
							 LPVOID			cltContext);

/*void PatchServerGetLastFile(
LPVOID			svrContext,
SERVICEUSERID	sender,
MSG_STRUCT *	msg,
LPVOID			cltContext);*/

void PatchServerGetFile_W(
						  LPVOID			svrContext,
						  SERVICEUSERID	sender,
						  MSG_STRUCT *	msg,
						  LPVOID			cltContext);

void PatchServerGetFile_A(
						  LPVOID			svrContext,
						  SERVICEUSERID	sender,
						  MSG_STRUCT *	msg,
						  LPVOID			cltContext);

/*VOID PatchServerClientInfo(
LPVOID			svrContext,
SERVICEUSERID	sender,
MSG_STRUCT *	msg,
LPVOID			cltContext);*/

void PatchServerGetExeList(
						   LPVOID			svrContext,
						   SERVICEUSERID	sender,
						   MSG_STRUCT *	msg,
						   LPVOID			cltContext);

void PatchServerGetDataList(
							LPVOID			svrContext,
							SERVICEUSERID	sender,
							MSG_STRUCT *	msg,
							LPVOID			cltContext);

void PatchServerCltVersionHandler(
							 LPVOID			svrContext,
							 SERVICEUSERID	sender,
							 MSG_STRUCT *	msg,
							 LPVOID			cltContext);

void PatchServerFileStatusHandler(
	LPVOID			svrContext,
	SERVICEUSERID	sender,
	MSG_STRUCT *	msg,
	LPVOID			cltContext);

inline void PatchServerKeepAliveHandler(
	LPVOID			/*svrContext*/,
	SERVICEUSERID	/*sender*/,
	MSG_STRUCT *	/*msg*/,
	LPVOID			/*cltContext*/) { }

#endif //_PATCH_SERVER_CMD_TABLE_H_
#endif //SERVER_VERSION
/////////////////////////////////////////////////////////////////////////

#ifndef _PATCH_SERVER_REQUEST_MSG_
#define _PATCH_SERVER_REQUEST_MSG_

enum {
	BUILD_UNDEFINED,
	BUILD_32,
	BUILD_64,
};

DEF_MSG_STRUCT(PATCH_SERVER_GET_FILE_SHA_MSG_W)
MSG_WCHAR(0, fpath, DEFAULT_FILE_WITH_PATH_SIZE+1)
MSG_WCHAR(1, fname, DEFAULT_FILE_WITH_PATH_SIZE+1)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_GET_FILE_SHA_MSG_A)
MSG_CHAR(0, fpath, DEFAULT_FILE_WITH_PATH_SIZE+1)
MSG_CHAR(1, fname, DEFAULT_FILE_WITH_PATH_SIZE+1)
END_MSG_STRUCT

/*DEF_MSG_STRUCT(PATCH_SERVER_GET_LAST_FILE_MSG)
END_MSG_STRUCT*/

DEF_MSG_STRUCT(PATCH_SERVER_GET_EXE_LIST_MSG)
	MSG_FIELD(0, DWORD, version, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_GET_DATA_LIST_MSG)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_GET_FILE_MSG_W)
	MSG_WCHAR(0, fpath, DEFAULT_FILE_WITH_PATH_SIZE+1)
	MSG_WCHAR(1, fname, DEFAULT_FILE_WITH_PATH_SIZE+1)
	MSG_FIELD(2, BYTE, idx, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_GET_FILE_MSG_A)
	MSG_CHAR(0, fpath, DEFAULT_FILE_WITH_PATH_SIZE+1)
	MSG_CHAR(1, fname, DEFAULT_FILE_WITH_PATH_SIZE+1)
	MSG_FIELD(2, BYTE, idx, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_SEND_CLIENT_VERSION_MSG)
	MSG_FIELD(0, DWORD, version, 0)
	MSG_FIELD(1, BYTE, buildType, BUILD_UNDEFINED)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_SEND_RECEIVED_FILE_STATUS_MSG)
	MSG_FIELD(0, DWORD, timeStamp, 0)
	MSG_FIELD(1, BYTE, idx, 0)
	MSG_FIELD(2, DWORD, receivedBytes, 0)
	MSG_FIELD(3, BYTE, bCompleted, FALSE)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_KEEP_ALIVE_MSG)
END_MSG_STRUCT


#ifdef UNICODE
#define PATCH_SERVER_GET_FILE_SHA_MSG		PATCH_SERVER_GET_FILE_SHA_MSG_W
#define PATCH_SERVER_GET_FILE_SHA			PATCH_SERVER_GET_FILE_SHA_W
#define PATCH_SERVER_GET_FILE_MSG			PATCH_SERVER_GET_FILE_MSG_W
#define PATCH_SERVER_GET_FILE				PATCH_SERVER_GET_FILE_W
#else // UNICODE
#define PATCH_SERVER_GET_FILE_SHA_MSG		PATCH_SERVER_GET_FILE_SHA_MSG_A
#define PATCH_SERVER_GET_FILE_SHA			PATCH_SERVER_GET_FILE_SHA_A
#define PATCH_SERVER_GET_FILE_MSG			PATCH_SERVER_GET_FILE_MSG_A
#define PATCH_SERVER_GET_FILE				PATCH_SERVER_GET_FILE_A
#endif // UNICODE
#endif //_PATCH_SERVER_REQUEST_MSG_

/////////////////////////////////////////////////////////////////////////

#ifndef _PATCH_REQUEST_TABLE_
#define _PATCH_REQUEST_TABLE_

PATCH_MSG_REQUEST_TABLE_BEGIN( PATCH_SERVER )
PATCH_MSG_REQUEST_TABLE_DEF(PATCH_SERVER_GET_FILE_SHA_W,			PATCH_SERVER_GET_FILE_SHA_MSG_W,			PatchServerGetFileSHA_W,		FALSE,	FALSE)
PATCH_MSG_REQUEST_TABLE_DEF(PATCH_SERVER_GET_FILE_SHA_A,			PATCH_SERVER_GET_FILE_SHA_MSG_A,			PatchServerGetFileSHA_A,		FALSE,	FALSE)
PATCH_MSG_REQUEST_TABLE_DEF(PATCH_SERVER_GET_FILE_W,				PATCH_SERVER_GET_FILE_MSG_W,				PatchServerGetFile_W,			FALSE,	FALSE)
PATCH_MSG_REQUEST_TABLE_DEF(PATCH_SERVER_GET_FILE_A,				PATCH_SERVER_GET_FILE_MSG_A,				PatchServerGetFile_A,			FALSE,	FALSE)
PATCH_MSG_REQUEST_TABLE_DEF(PATCH_SERVER_GET_EXE_LIST,				PATCH_SERVER_GET_EXE_LIST_MSG,				PatchServerGetExeList,			FALSE,	FALSE)
PATCH_MSG_REQUEST_TABLE_DEF(PATCH_SERVER_GET_DATA_LIST,				PATCH_SERVER_GET_DATA_LIST_MSG,				PatchServerGetDataList,			FALSE,	FALSE)
PATCH_MSG_REQUEST_TABLE_DEF(PATCH_SERVER_SEND_CLIENT_VERSION,		PATCH_SERVER_SEND_CLIENT_VERSION_MSG,		PatchServerCltVersionHandler,	FALSE,	FALSE)
PATCH_MSG_REQUEST_TABLE_DEF(PATCH_SERVER_SEND_RECEIVED_FILE_STATUS,	PATCH_SERVER_SEND_RECEIVED_FILE_STATUS_MSG,	PatchServerFileStatusHandler,	FALSE,	FALSE)
PATCH_MSG_REQUEST_TABLE_DEF(PATCH_SERVER_KEEP_ALIVE,				PATCH_SERVER_KEEP_ALIVE_MSG,				PatchServerKeepAliveHandler,	FALSE,	FALSE)
PATCH_MSG_REQUEST_TABLE_END( PATCH_REQUEST_COUNT )


#endif	//	_PATCH_REQUEST_TABLE_

/////////////////////////////////////////////////////////////////////////


#ifndef _PATCH_SERVER_RESPONSE_MSG_
#define _PATCH_SERVER_RESPONSE_MSG_

#define PATCH_GM_SMALL_MSG_BUF_SIZE						1024
#define DEFAULT_FILE_DATA_SIZE_SMALL					(MAX_SMALL_MSG_DATA_SIZE - sizeof(WORD) - sizeof(BYTE) - sizeof(DWORD) - 3 * sizeof(DWORD) - (SMALL_MSG_BUF_SIZE - PATCH_GM_SMALL_MSG_BUF_SIZE))
#define DEFAULT_FILE_DATA_SIZE_LARGE					(MAX_LARGE_MSG_DATA_SIZE - sizeof(WORD) - sizeof(BYTE) - sizeof(DWORD) - 3 * sizeof(DWORD))


DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_FILE_SHA_MSG)
	MSG_ARRAY(0, BYTE, sha_hash, SHA1HashSize)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_FILE_NOT_FOUND_MSG)
	MSG_FIELD(0, BYTE, idx, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_FILE_DATA_SMALL_MSG)
	MSG_FIELD(0, BYTE, idx, 0)
	MSG_FIELD(1, DWORD, offset, 0)
	MSG_BLOBW(2, data, DEFAULT_FILE_DATA_SIZE_SMALL)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_FILE_DATA_LARGE_MSG)
	MSG_FIELD(0, BYTE, idx, 0)
	MSG_FIELD(1, DWORD, offset, 0)
	MSG_BLOBW(2, data, DEFAULT_FILE_DATA_SIZE_LARGE)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_FILE_TRANSFER_DONE_MSG)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_FILE_HEADER_MSG)
	MSG_FIELD(0, DWORD, filesize, 0)
	MSG_FIELD(1, BYTE, bInPak, FALSE)
	MSG_FIELD(2, BYTE, idx, 0)
	MSG_FIELD(3, DWORD, gentime_low, 0)
	MSG_FIELD(4, DWORD, gentime_high, 0)
	MSG_FIELD(5, DWORD, filesize_compressed, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_COMPRESSION_SIZE_MSG)
	MSG_FIELD(0, DWORD, sizeOriginal, 0)
	MSG_FIELD(1, DWORD, sizeCompressed, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_FILE_SHA_HASH_MSG)
	MSG_WCHAR(0, fpath, DEFAULT_FILE_WITH_PATH_SIZE+1)
	MSG_WCHAR(1, fname, DEFAULT_FILE_WITH_PATH_SIZE+1)
	MSG_ARRAY(2, BYTE, sha_hash, SHA1HashSize)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_INIT_DONE_MSG)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_PAKFILE_INFO_MSG)
	MSG_FIELD(	0,	DWORD,		iIndex,				0)
	MSG_FIELD(	1,	DWORD,		iCount,				0)
	MSG_FIELD(	2,	DWORD,		iMaxIndex,			0)
	MSG_FIELD(	3,	DWORD,		bCreate,			0)
	MSG_FIELD(	4,	DWORD,		iAlternativeIndex,	0)
	MSG_CHAR(	5,				strBaseName,		DEFAULT_FILE_WITH_PATH_SIZE+1)
END_MSG_STRUCT

DEF_MSG_STRUCT(PATCH_SERVER_RESPONSE_QUEUE_POSITION_MSG)
	MSG_FIELD( 0, int, nQueuePosition, 0)
	MSG_FIELD( 1, int, nQueueLength, 0)
END_MSG_STRUCT

#endif //_PATCH_SERVER_RESPONSE_MSG_


/////////////////////////////////////////////////////////////////////////


#ifndef _PATCH_RESPONSE_TABLE_
#define _PATCH_RESPONSE_TABLE_

PATCH_MSG_RESPONSE_TABLE_BEGIN( PATCH_SERVER )
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_FILE_SHA_HASH,		PATCH_SERVER_RESPONSE_FILE_SHA_HASH_MSG,		FALSE,		FALSE)
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_INIT_DONE,			PATCH_SERVER_RESPONSE_INIT_DONE_MSG,			FALSE,		FALSE)
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_FILE_SHA,			PATCH_SERVER_RESPONSE_FILE_SHA_MSG,				FALSE,		FALSE)
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_FILE_NOT_FOUND,		PATCH_SERVER_RESPONSE_FILE_NOT_FOUND_MSG,		FALSE,		FALSE)
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_FILE_DATA_SMALL,		PATCH_SERVER_RESPONSE_FILE_DATA_SMALL_MSG,		FALSE,		FALSE)
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_FILE_HEADER,			PATCH_SERVER_RESPONSE_FILE_HEADER_MSG,			FALSE,		FALSE)
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_FILE_TRANSFER_DONE,	PATCH_SERVER_RESPONSE_FILE_TRANSFER_DONE_MSG,	FALSE,		FALSE)
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_COMPRESSION_SIZE,	PATCH_SERVER_RESPONSE_COMPRESSION_SIZE_MSG,		FALSE,		FALSE)

// added in patch client version 5
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_PAKFILE_INFO,		PATCH_SERVER_RESPONSE_PAKFILE_INFO_MSG,			FALSE,		FALSE)

// added in patch client version 6
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_FILE_DATA_LARGE,		PATCH_SERVER_RESPONSE_FILE_DATA_LARGE_MSG,		FALSE,		FALSE)

//	added in patch client version 7 (.... POST GOLD MASTER!!!!)
PATCH_MSG_RESPONSE_TABLE_DEF(PATCH_SERVER_RESPONSE_QUEUE_POSITION,		PATCH_SERVER_RESPONSE_QUEUE_POSITION_MSG,		FALSE,		FALSE)

PATCH_MSG_RESPONSE_TABLE_END( PATCH_RESPONSE_COUNT )

#endif	//	_PATCH_RESPONSE_TABLE_

////////////////////////////////////////////////////////////////////////


