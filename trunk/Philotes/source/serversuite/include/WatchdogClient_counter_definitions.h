#pragma once

#include <winperf.h>

#define MAX_PERF_INSTANCE_NAME 32 // must be a multiple of 8
#define DEFAULT_NUM_INSTANCES 2
#define APP_PERF_NAME WatchdogClient
#define APP_REGISTRY_PERF_KEY  L"SYSTEM\\CurrentControlSet\\Services\\WatchdogClient\\Performance"
#define APP_PERF_SHARED_MEMORY_NAME "Global\\WatchdogClient_SHARED_MEMORY"
#define APP_PERF_SHARED_MEM_MUTEX_NAME L"Global\\WatchdogClient_SHARED_MEMORY_MUTEX"
//Enumeration of counter types
enum PERFCOUNTER_OBJECT_TYPES
{
	PERFCOUNTER_OBJECT_TYPE_UserServer,
	PERFCOUNTER_OBJECT_TYPE_GameServerThread,
	PERFCOUNTER_OBJECT_TYPE_GameServer,
	PERFCOUNTER_OBJECT_TYPE_CHAT_SERVER,
	PERFCOUNTER_OBJECT_TYPE_DATABASE_POOL,
	PERFCOUNTER_OBJECT_TYPE_CMemoryAllocator,
	PERFCOUNTER_OBJECT_TYPE_LoginServer,
	PERFCOUNTER_OBJECT_TYPE_MuxServer,
	PERFCOUNTER_OBJECT_TYPE_MuxClientImpl,
	PERFCOUNTER_OBJECT_TYPE_HLOCK_LIB,
	PERFCOUNTER_OBJECT_TYPE_PatchServer,
	PERFCOUNTER_OBJECT_TYPE_GameLoadBalanceServer,
	PERFCOUNTER_OBJECT_TYPE_CommonNetWorker,
	PERFCOUNTER_OBJECT_TYPE_CommonNetServer,
	PERFCOUNTER_OBJECT_TYPE_CommonNetBufferPool,
	PERFCOUNTER_OBJECT_TYPE_BillingProxy,
	PERFCOUNTER_OBJECT_TYPE_CSRBridgeServer,
	PERFCOUNTER_OBJECT_TYPE_BattleServer,
	PERFCOUNTER_OBJECT_TYPE_GlobalGameEventServer,
	PERFCOUNTER_OBJECT_TYPE_MAX
};

//Base object
struct PERFINSTANCE_BASE
{
	LIST_ENTRY listEntry;
	PERFCOUNTER_OBJECT_TYPES type;
	DWORD  typePad;
	PERF_INSTANCE_DEFINITION instance;
	WCHAR name[MAX_PERF_INSTANCE_NAME];
	PERF_COUNTER_BLOCK CounterBlock;
};

//The instance struct for UserServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_UserServer:PERFINSTANCE_BASE
{
	ULONGLONG numClients;
	ULONGLONG numServers;
	ULONGLONG byteRateOut;
	ULONGLONG byteRateIn;
	ULONGLONG invalidCommandCount;
	ULONGLONG incomingMessageRate;
	ULONGLONG outGoingMessageRate;
	ULONGLONG numSessions;
	ULONGLONG messageRateExceeded;
};

struct UserServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION numClientsDef;
	PERF_COUNTER_DEFINITION numServersDef;
	PERF_COUNTER_DEFINITION byteRateOutDef;
	PERF_COUNTER_DEFINITION byteRateInDef;
	PERF_COUNTER_DEFINITION invalidCommandCountDef;
	PERF_COUNTER_DEFINITION incomingMessageRateDef;
	PERF_COUNTER_DEFINITION outGoingMessageRateDef;
	PERF_COUNTER_DEFINITION numSessionsDef;
	PERF_COUNTER_DEFINITION messageRateExceededDef;
};

//The instance struct for GameServerThread perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_GameServerThread:PERFINSTANCE_BASE
{
	ULONGLONG GameServerThreadGameTicks;
	ULONGLONG GameServerThreadMaxSimultaneousTicks;
	ULONGLONG GameServerThreadGameTickRate;
};

struct GameServerThread_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION GameServerThreadGameTicksDef;
	PERF_COUNTER_DEFINITION GameServerThreadMaxSimultaneousTicksDef;
	PERF_COUNTER_DEFINITION GameServerThreadGameTickRateDef;
};

//The instance struct for GameServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_GameServer:PERFINSTANCE_BASE
{
	ULONGLONG GameServerClientCount;
	ULONGLONG GameServerAlltimeClientCount;
	ULONGLONG GameServerClientDetachCount;
	ULONGLONG GameServerSendErrorCount;
	ULONGLONG GameServerPingBootCount;
	ULONGLONG GameServerIdValidateBootCount;
	ULONGLONG GameServerMessageRateBootCount;
	ULONGLONG GameServerCCMD_EXIT_GAMECount;
	ULONGLONG GameServerMaximumClientCount;
	ULONGLONG GameServerGameCount;
	ULONGLONG GameServerLevelCount;
	ULONGLONG GameServerUnitCount;
	ULONGLONG GameServerSimulationFrames;
	ULONGLONG GameServerSimulationFrameRate;
	ULONGLONG GameServerGameTickRate;
	ULONGLONG GameServerDRLGRate;
	ULONGLONG GameServerUnitStepRate;
	ULONGLONG GameServerUnitStepMonsterRate;
	ULONGLONG GameServerUnitStepMissileRate;
	ULONGLONG GameServerUnitStepItemRate;
	ULONGLONG GameServerUnitStepPlayerRate;
	ULONGLONG GameServerGameEventRate;
	ULONGLONG GameServerGameEventHandlers;
	ULONGLONG GameServerAStarPathRate;
	ULONGLONG GameServerLinearPathRate;
	ULONGLONG GameServerPathFailureRate;
	ULONGLONG GameServerMessagesReceivedPerSecond;
	ULONGLONG GameServerMessagesSentPerSecond;
	ULONGLONG RoomGetNearestPathNodesInArray;
	ULONGLONG RoomGetNearestFreePathNode;
	ULONGLONG RoomGetNearestPathNodes;
	ULONGLONG Ping;
	ULONGLONG ExperienceGainCount;
};

struct GameServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION GameServerClientCountDef;
	PERF_COUNTER_DEFINITION GameServerAlltimeClientCountDef;
	PERF_COUNTER_DEFINITION GameServerClientDetachCountDef;
	PERF_COUNTER_DEFINITION GameServerSendErrorCountDef;
	PERF_COUNTER_DEFINITION GameServerPingBootCountDef;
	PERF_COUNTER_DEFINITION GameServerIdValidateBootCountDef;
	PERF_COUNTER_DEFINITION GameServerMessageRateBootCountDef;
	PERF_COUNTER_DEFINITION GameServerCCMD_EXIT_GAMECountDef;
	PERF_COUNTER_DEFINITION GameServerMaximumClientCountDef;
	PERF_COUNTER_DEFINITION GameServerGameCountDef;
	PERF_COUNTER_DEFINITION GameServerLevelCountDef;
	PERF_COUNTER_DEFINITION GameServerUnitCountDef;
	PERF_COUNTER_DEFINITION GameServerSimulationFramesDef;
	PERF_COUNTER_DEFINITION GameServerSimulationFrameRateDef;
	PERF_COUNTER_DEFINITION GameServerGameTickRateDef;
	PERF_COUNTER_DEFINITION GameServerDRLGRateDef;
	PERF_COUNTER_DEFINITION GameServerUnitStepRateDef;
	PERF_COUNTER_DEFINITION GameServerUnitStepMonsterRateDef;
	PERF_COUNTER_DEFINITION GameServerUnitStepMissileRateDef;
	PERF_COUNTER_DEFINITION GameServerUnitStepItemRateDef;
	PERF_COUNTER_DEFINITION GameServerUnitStepPlayerRateDef;
	PERF_COUNTER_DEFINITION GameServerGameEventRateDef;
	PERF_COUNTER_DEFINITION GameServerGameEventHandlersDef;
	PERF_COUNTER_DEFINITION GameServerAStarPathRateDef;
	PERF_COUNTER_DEFINITION GameServerLinearPathRateDef;
	PERF_COUNTER_DEFINITION GameServerPathFailureRateDef;
	PERF_COUNTER_DEFINITION GameServerMessagesReceivedPerSecondDef;
	PERF_COUNTER_DEFINITION GameServerMessagesSentPerSecondDef;
	PERF_COUNTER_DEFINITION RoomGetNearestPathNodesInArrayDef;
	PERF_COUNTER_DEFINITION RoomGetNearestFreePathNodeDef;
	PERF_COUNTER_DEFINITION RoomGetNearestPathNodesDef;
	PERF_COUNTER_DEFINITION PingDef;
	PERF_COUNTER_DEFINITION ExperienceGainCountDef;
};

//The instance struct for CHAT_SERVER perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_CHAT_SERVER:PERFINSTANCE_BASE
{
	ULONGLONG CHATPERF_SYS_MEMBER_CONNECTIONS;
	ULONGLONG CHATPERF_SYS_MEMBER_CONNECTION_RATE;
	ULONGLONG CHATPERF_SYS_MEMBER_COMMAND_RATE;
	ULONGLONG CHATPERF_SYS_GAMESVR_CONNECTIONS;
	ULONGLONG CHATPERF_SYS_GAMESVR_COMMAND_RATE;
	ULONGLONG CHATPERF_SYS_MULTIPOINT_SENDS;
	ULONGLONG CHATPERF_SYS_CSR_COMMAND_RATE;
	ULONGLONG CHATPERF_MBR_MEMBER_OBJECT_COUNT;
	ULONGLONG CHATPERF_MBR_DIRECT_MEMBER_MSG_RATE;
	ULONGLONG CHATPERF_CNL_CHANNEL_OBJECT_COUNT;
	ULONGLONG CHATPERF_CNL_CHANNEL_MEMBER_MSG_RATE;
	ULONGLONG CHATPERF_CNL_CHANNEL_MEMBER_MSG_RECIPIENTS;
	ULONGLONG CHATPERF_CNL_CHANNEL_CHAT_MSG_RATE;
	ULONGLONG CHATPERF_PTY_CHAT_PARTY_OBJECT_COUNT;
	ULONGLONG CHATPERF_PTY_GAMESVR_MSG_RATE;
	ULONGLONG CHATPERF_PTY_GAMESVR_MSG_RECIPIENTS;
	ULONGLONG CHATPERF_PTY_PARTY_CHAT_CHANNEL_PERCENTILENumerator;
	ULONGLONG CHATPERF_PTY_PARTY_CHAT_CHANNEL_PERCENTILEDenominator;
	ULONGLONG CHATPERF_IM_CHAT_CHANNEL_COUNT;
	ULONGLONG CHATPERF_IM_CHAT_CHANNEL_PERCENTILENumerator;
	ULONGLONG CHATPERF_IM_CHAT_CHANNEL_PERCENTILEDenominator;
	ULONGLONG CHATPERF_PAD_ADVERTISED_PARTIES_COUNT;
	ULONGLONG CHATPERF_PAD_PARTY_CLASSIFICATIONS_COUNT;
	ULONGLONG CHATPERF_PAD_PARTY_INFO_UPDATES;
	ULONGLONG CHATPERF_PAD_PARTY_AD_GET_REQUESTS;
	ULONGLONG CHATPERF_PAD_PARTY_ADS_SENT;
	ULONGLONG CHATPERF_GLD_GUILD_COUNT;
	ULONGLONG CHATPERF_HAK_FAILED_LOGINS;
	ULONGLONG CHATPERF_HAK_REJECTED_TIME_PROTECTED_OPS;
	ULONGLONG CHATPERF_HAK_NOT_LOGGED_IN_COMMANDS;
	ULONGLONG CHATPERF_HAK_NOT_A_MEMBER_REQUESTS;
	ULONGLONG CHATPERF_HAK_UNSUPPORTED_REQUESTS;
	ULONGLONG CHATPERF_MSGRATES_SEND_CHAT;
	ULONGLONG CHATPERF_MSGRATES_IGNORE_OPERATION;
	ULONGLONG CHATPERF_MSGRATES_BUDDY_LIST_OPERATION;
	ULONGLONG CHATPERF_MSGRATES_PARTY_OPERATION;
	ULONGLONG CHATPERF_MSGRATES_GUILD_OPERATION;
	ULONGLONG CHATPERF_MSGRATES_MISC_GETSET_INFO;
	ULONGLONG CHATPERF_MSGRATES_MISC_CHANNEL_ADDLEAVE;
	ULONGLONG CHATPERF_EMAIL_SEND_REQUESTS;
	ULONGLONG CHATPERF_EMAIL_COMPOSING_MESSAGES;
	ULONGLONG CHATPERF_EMAIL_ABORTED_COMPOSING_MESSAGES;
	ULONGLONG CHATPERF_EMAIL_RECEIVE_REQUESTS;
	ULONGLONG CHATPERF_EMAIL_RECEIVED_EMAILS;
	ULONGLONG CHATPERF_HYPERTEXT_TOTAL_MESSAGE_COUNT;
	ULONGLONG CHATPERF_HYPERTEXT_TOTAL_DATA_BYTES_SENT;
};

struct CHAT_SERVER_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION CHATPERF_SYS_MEMBER_CONNECTIONSDef;
	PERF_COUNTER_DEFINITION CHATPERF_SYS_MEMBER_CONNECTION_RATEDef;
	PERF_COUNTER_DEFINITION CHATPERF_SYS_MEMBER_COMMAND_RATEDef;
	PERF_COUNTER_DEFINITION CHATPERF_SYS_GAMESVR_CONNECTIONSDef;
	PERF_COUNTER_DEFINITION CHATPERF_SYS_GAMESVR_COMMAND_RATEDef;
	PERF_COUNTER_DEFINITION CHATPERF_SYS_MULTIPOINT_SENDSDef;
	PERF_COUNTER_DEFINITION CHATPERF_SYS_CSR_COMMAND_RATEDef;
	PERF_COUNTER_DEFINITION CHATPERF_MBR_MEMBER_OBJECT_COUNTDef;
	PERF_COUNTER_DEFINITION CHATPERF_MBR_DIRECT_MEMBER_MSG_RATEDef;
	PERF_COUNTER_DEFINITION CHATPERF_CNL_CHANNEL_OBJECT_COUNTDef;
	PERF_COUNTER_DEFINITION CHATPERF_CNL_CHANNEL_MEMBER_MSG_RATEDef;
	PERF_COUNTER_DEFINITION CHATPERF_CNL_CHANNEL_MEMBER_MSG_RECIPIENTSDef;
	PERF_COUNTER_DEFINITION CHATPERF_CNL_CHANNEL_CHAT_MSG_RATEDef;
	PERF_COUNTER_DEFINITION CHATPERF_PTY_CHAT_PARTY_OBJECT_COUNTDef;
	PERF_COUNTER_DEFINITION CHATPERF_PTY_GAMESVR_MSG_RATEDef;
	PERF_COUNTER_DEFINITION CHATPERF_PTY_GAMESVR_MSG_RECIPIENTSDef;
	PERF_COUNTER_DEFINITION CHATPERF_PTY_PARTY_CHAT_CHANNEL_PERCENTILENumeratorDef;
	PERF_COUNTER_DEFINITION CHATPERF_PTY_PARTY_CHAT_CHANNEL_PERCENTILEDenominatorDef;
	PERF_COUNTER_DEFINITION CHATPERF_IM_CHAT_CHANNEL_COUNTDef;
	PERF_COUNTER_DEFINITION CHATPERF_IM_CHAT_CHANNEL_PERCENTILENumeratorDef;
	PERF_COUNTER_DEFINITION CHATPERF_IM_CHAT_CHANNEL_PERCENTILEDenominatorDef;
	PERF_COUNTER_DEFINITION CHATPERF_PAD_ADVERTISED_PARTIES_COUNTDef;
	PERF_COUNTER_DEFINITION CHATPERF_PAD_PARTY_CLASSIFICATIONS_COUNTDef;
	PERF_COUNTER_DEFINITION CHATPERF_PAD_PARTY_INFO_UPDATESDef;
	PERF_COUNTER_DEFINITION CHATPERF_PAD_PARTY_AD_GET_REQUESTSDef;
	PERF_COUNTER_DEFINITION CHATPERF_PAD_PARTY_ADS_SENTDef;
	PERF_COUNTER_DEFINITION CHATPERF_GLD_GUILD_COUNTDef;
	PERF_COUNTER_DEFINITION CHATPERF_HAK_FAILED_LOGINSDef;
	PERF_COUNTER_DEFINITION CHATPERF_HAK_REJECTED_TIME_PROTECTED_OPSDef;
	PERF_COUNTER_DEFINITION CHATPERF_HAK_NOT_LOGGED_IN_COMMANDSDef;
	PERF_COUNTER_DEFINITION CHATPERF_HAK_NOT_A_MEMBER_REQUESTSDef;
	PERF_COUNTER_DEFINITION CHATPERF_HAK_UNSUPPORTED_REQUESTSDef;
	PERF_COUNTER_DEFINITION CHATPERF_MSGRATES_SEND_CHATDef;
	PERF_COUNTER_DEFINITION CHATPERF_MSGRATES_IGNORE_OPERATIONDef;
	PERF_COUNTER_DEFINITION CHATPERF_MSGRATES_BUDDY_LIST_OPERATIONDef;
	PERF_COUNTER_DEFINITION CHATPERF_MSGRATES_PARTY_OPERATIONDef;
	PERF_COUNTER_DEFINITION CHATPERF_MSGRATES_GUILD_OPERATIONDef;
	PERF_COUNTER_DEFINITION CHATPERF_MSGRATES_MISC_GETSET_INFODef;
	PERF_COUNTER_DEFINITION CHATPERF_MSGRATES_MISC_CHANNEL_ADDLEAVEDef;
	PERF_COUNTER_DEFINITION CHATPERF_EMAIL_SEND_REQUESTSDef;
	PERF_COUNTER_DEFINITION CHATPERF_EMAIL_COMPOSING_MESSAGESDef;
	PERF_COUNTER_DEFINITION CHATPERF_EMAIL_ABORTED_COMPOSING_MESSAGESDef;
	PERF_COUNTER_DEFINITION CHATPERF_EMAIL_RECEIVE_REQUESTSDef;
	PERF_COUNTER_DEFINITION CHATPERF_EMAIL_RECEIVED_EMAILSDef;
	PERF_COUNTER_DEFINITION CHATPERF_HYPERTEXT_TOTAL_MESSAGE_COUNTDef;
	PERF_COUNTER_DEFINITION CHATPERF_HYPERTEXT_TOTAL_DATA_BYTES_SENTDef;
};

//The instance struct for DATABASE_POOL perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_DATABASE_POOL:PERFINSTANCE_BASE
{
	ULONGLONG DBPERF_POOLED_CONNECTIONS;
	ULONGLONG DBPERF_OUTSTANDING_QUERIES;
	ULONGLONG DBPERF_PROCESSED_QUERIES;
	ULONGLONG DBPERF_SINGLE_DATA_REQUESTS;
	ULONGLONG DBPERF_PARTIAL_BATCH_DATA_REQUESTS;
	ULONGLONG DBPERF_FULL_BATCH_DATA_REQUESTS;
	ULONGLONG DBPERF_QUERY_PROC_TIME;
	ULONGLONG DBPERF_RETRIEVE_RESULTS_TIME;
	ULONGLONG DBPERF_FAILED_QUERIES;
	ULONGLONG DBPERF_WAITING_BATCH_TIMER_CALLBACKS;
	ULONGLONG DBPERF_PROCESSED_BATCH_TIMER_CALLBACKS;
	ULONGLONG DBPERF_CANCELED_REQUESTS;
	ULONGLONG DBPERF_ATTEMPTED_REQUEST_CANCELATIONS;
	ULONGLONG DBPERF_TOTAL_REQUESTS_PROCESSED_ON_ACTIVE_CONNECTIONS;
	ULONGLONG DBPERF_CONNECTION_REESTABLISHMENTS;
	ULONGLONG DBPERF_LIFETIME_REQUESTS;
};

struct DATABASE_POOL_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION DBPERF_POOLED_CONNECTIONSDef;
	PERF_COUNTER_DEFINITION DBPERF_OUTSTANDING_QUERIESDef;
	PERF_COUNTER_DEFINITION DBPERF_PROCESSED_QUERIESDef;
	PERF_COUNTER_DEFINITION DBPERF_SINGLE_DATA_REQUESTSDef;
	PERF_COUNTER_DEFINITION DBPERF_PARTIAL_BATCH_DATA_REQUESTSDef;
	PERF_COUNTER_DEFINITION DBPERF_FULL_BATCH_DATA_REQUESTSDef;
	PERF_COUNTER_DEFINITION DBPERF_QUERY_PROC_TIMEDef;
	PERF_COUNTER_DEFINITION DBPERF_RETRIEVE_RESULTS_TIMEDef;
	PERF_COUNTER_DEFINITION DBPERF_FAILED_QUERIESDef;
	PERF_COUNTER_DEFINITION DBPERF_WAITING_BATCH_TIMER_CALLBACKSDef;
	PERF_COUNTER_DEFINITION DBPERF_PROCESSED_BATCH_TIMER_CALLBACKSDef;
	PERF_COUNTER_DEFINITION DBPERF_CANCELED_REQUESTSDef;
	PERF_COUNTER_DEFINITION DBPERF_ATTEMPTED_REQUEST_CANCELATIONSDef;
	PERF_COUNTER_DEFINITION DBPERF_TOTAL_REQUESTS_PROCESSED_ON_ACTIVE_CONNECTIONSDef;
	PERF_COUNTER_DEFINITION DBPERF_CONNECTION_REESTABLISHMENTSDef;
	PERF_COUNTER_DEFINITION DBPERF_LIFETIME_REQUESTSDef;
};

//The instance struct for CMemoryAllocator perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_CMemoryAllocator:PERFINSTANCE_BASE
{
	ULONGLONG TotalExternalAllocationSize;
	ULONGLONG ExternalAllocationRate;
	ULONGLONG ExternalFreeRate;
};

struct CMemoryAllocator_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION TotalExternalAllocationSizeDef;
	PERF_COUNTER_DEFINITION ExternalAllocationRateDef;
	PERF_COUNTER_DEFINITION ExternalFreeRateDef;
};

//The instance struct for LoginServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_LoginServer:PERFINSTANCE_BASE
{
	ULONGLONG numLoginClients;
	ULONGLONG loginRequestRate;
	ULONGLONG loginRequestsPending;
	ULONGLONG loginRequestsSuccessful;
	ULONGLONG loginRequestsFailed;
	ULONGLONG usedTicketCacheSize;
};

struct LoginServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION numLoginClientsDef;
	PERF_COUNTER_DEFINITION loginRequestRateDef;
	PERF_COUNTER_DEFINITION loginRequestsPendingDef;
	PERF_COUNTER_DEFINITION loginRequestsSuccessfulDef;
	PERF_COUNTER_DEFINITION loginRequestsFailedDef;
	PERF_COUNTER_DEFINITION usedTicketCacheSizeDef;
};

//The instance struct for MuxServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_MuxServer:PERFINSTANCE_BASE
{
	ULONGLONG muxServerBytesSent;
	ULONGLONG muxServerBytesRecvd;
	ULONGLONG muxServerActualClientCount;
	ULONGLONG muxServerVirtualClientCount;
};

struct MuxServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION muxServerBytesSentDef;
	PERF_COUNTER_DEFINITION muxServerBytesRecvdDef;
	PERF_COUNTER_DEFINITION muxServerActualClientCountDef;
	PERF_COUNTER_DEFINITION muxServerVirtualClientCountDef;
};

//The instance struct for MuxClientImpl perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_MuxClientImpl:PERFINSTANCE_BASE
{
	ULONGLONG muxClientBytesSent;
	ULONGLONG muxClientBytesRecvd;
	ULONGLONG muxClientCount;
	ULONGLONG muxClientDiscPending;
};

struct MuxClientImpl_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION muxClientBytesSentDef;
	PERF_COUNTER_DEFINITION muxClientBytesRecvdDef;
	PERF_COUNTER_DEFINITION muxClientCountDef;
	PERF_COUNTER_DEFINITION muxClientDiscPendingDef;
};

//The instance struct for HLOCK_LIB perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_HLOCK_LIB:PERFINSTANCE_BASE
{
	ULONGLONG LocksHeld;
	ULONGLONG LockContention;
	ULONGLONG LockOps;
};

struct HLOCK_LIB_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION LocksHeldDef;
	PERF_COUNTER_DEFINITION LockContentionDef;
	PERF_COUNTER_DEFINITION LockOpsDef;
};

//The instance struct for PatchServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_PatchServer:PERFINSTANCE_BASE
{
	ULONGLONG numCurrentClients;
	ULONGLONG numWaitingClients;
	ULONGLONG numReadyClients;
	ULONGLONG numStalledClients;
	ULONGLONG UnackedBytes;
	ULONGLONG numFilesPatched;
	ULONGLONG numSendingBytes;
	ULONGLONG numSendingMsgs;
};

struct PatchServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION numCurrentClientsDef;
	PERF_COUNTER_DEFINITION numWaitingClientsDef;
	PERF_COUNTER_DEFINITION numReadyClientsDef;
	PERF_COUNTER_DEFINITION numStalledClientsDef;
	PERF_COUNTER_DEFINITION UnackedBytesDef;
	PERF_COUNTER_DEFINITION numFilesPatchedDef;
	PERF_COUNTER_DEFINITION numSendingBytesDef;
	PERF_COUNTER_DEFINITION numSendingMsgsDef;
};

//The instance struct for GameLoadBalanceServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_GameLoadBalanceServer:PERFINSTANCE_BASE
{
	ULONGLONG numGameServerClients;
	ULONGLONG numGameLoginClients;
	ULONGLONG gameLoginRequestsPending;
	ULONGLONG gameLoginRequestsSuccessful;
	ULONGLONG gameLoginRequestsFailed;
	ULONGLONG gameSwitchRequests;
	ULONGLONG gameServerLogins;
	ULONGLONG gameServerLogouts;
	ULONGLONG gameServerDBFinishes;
	ULONGLONG gameTotalQueueLength;
	ULONGLONG gameSubscriptionPlayersInQueue;
	ULONGLONG gameFreePlayPlayersInQueue;
};

struct GameLoadBalanceServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION numGameServerClientsDef;
	PERF_COUNTER_DEFINITION numGameLoginClientsDef;
	PERF_COUNTER_DEFINITION gameLoginRequestsPendingDef;
	PERF_COUNTER_DEFINITION gameLoginRequestsSuccessfulDef;
	PERF_COUNTER_DEFINITION gameLoginRequestsFailedDef;
	PERF_COUNTER_DEFINITION gameSwitchRequestsDef;
	PERF_COUNTER_DEFINITION gameServerLoginsDef;
	PERF_COUNTER_DEFINITION gameServerLogoutsDef;
	PERF_COUNTER_DEFINITION gameServerDBFinishesDef;
	PERF_COUNTER_DEFINITION gameTotalQueueLengthDef;
	PERF_COUNTER_DEFINITION gameSubscriptionPlayersInQueueDef;
	PERF_COUNTER_DEFINITION gameFreePlayPlayersInQueueDef;
};

//The instance struct for CommonNetWorker perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_CommonNetWorker:PERFINSTANCE_BASE
{
	ULONGLONG schedulingRate;
	ULONGLONG sendCompletionRate;
	ULONGLONG recvCompletionRate;
};

struct CommonNetWorker_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION schedulingRateDef;
	PERF_COUNTER_DEFINITION sendCompletionRateDef;
	PERF_COUNTER_DEFINITION recvCompletionRateDef;
};

//The instance struct for CommonNetServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_CommonNetServer:PERFINSTANCE_BASE
{
	ULONGLONG numClientsConnected;
	ULONGLONG connectionRate;
	ULONGLONG numBytesOutstanding;
	ULONGLONG numSendsPending;
	ULONGLONG connectionsThrottledBySendCount;
	ULONGLONG connectionsThrottledByByteCount;
};

struct CommonNetServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION numClientsConnectedDef;
	PERF_COUNTER_DEFINITION connectionRateDef;
	PERF_COUNTER_DEFINITION numBytesOutstandingDef;
	PERF_COUNTER_DEFINITION numSendsPendingDef;
	PERF_COUNTER_DEFINITION connectionsThrottledBySendCountDef;
	PERF_COUNTER_DEFINITION connectionsThrottledByByteCountDef;
};

//The instance struct for CommonNetBufferPool perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_CommonNetBufferPool:PERFINSTANCE_BASE
{
	ULONGLONG overlapAllocationRate;
	ULONGLONG msgBufAllocationRate;
};

struct CommonNetBufferPool_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION overlapAllocationRateDef;
	PERF_COUNTER_DEFINITION msgBufAllocationRateDef;
};

//The instance struct for BillingProxy perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_BillingProxy:PERFINSTANCE_BASE
{
	ULONGLONG CurrentUsers;
	ULONGLONG LifetimeClientsAttached;
	ULONGLONG AccountsDBLinkUp;
	ULONGLONG RequestRate;
	ULONGLONG PendingResponses;
	ULONGLONG BillingProviderLinkFlag;
	ULONGLONG BillingProviderSendQueueSize;
	ULONGLONG BillingProviderMessageSendRate;
	ULONGLONG BillingProviderMessageRecvRate;
	ULONGLONG BillingProviderResyncFlag;
	ULONGLONG BillingProviderKicks;
	ULONGLONG BillingProviderErrors;
};

struct BillingProxy_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION CurrentUsersDef;
	PERF_COUNTER_DEFINITION LifetimeClientsAttachedDef;
	PERF_COUNTER_DEFINITION AccountsDBLinkUpDef;
	PERF_COUNTER_DEFINITION RequestRateDef;
	PERF_COUNTER_DEFINITION PendingResponsesDef;
	PERF_COUNTER_DEFINITION BillingProviderLinkFlagDef;
	PERF_COUNTER_DEFINITION BillingProviderSendQueueSizeDef;
	PERF_COUNTER_DEFINITION BillingProviderMessageSendRateDef;
	PERF_COUNTER_DEFINITION BillingProviderMessageRecvRateDef;
	PERF_COUNTER_DEFINITION BillingProviderResyncFlagDef;
	PERF_COUNTER_DEFINITION BillingProviderKicksDef;
	PERF_COUNTER_DEFINITION BillingProviderErrorsDef;
};

//The instance struct for CSRBridgeServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_CSRBridgeServer:PERFINSTANCE_BASE
{
	ULONGLONG NumNamedPipesOpen;
	ULONGLONG NumXmlMessagesRecvd;
};

struct CSRBridgeServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION NumNamedPipesOpenDef;
	PERF_COUNTER_DEFINITION NumXmlMessagesRecvdDef;
};

//The instance struct for BattleServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_BattleServer:PERFINSTANCE_BASE
{
	ULONGLONG BattleServerSimulationFrames;
	ULONGLONG BattleServerSimulationFrameRate;
};

struct BattleServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION BattleServerSimulationFramesDef;
	PERF_COUNTER_DEFINITION BattleServerSimulationFrameRateDef;
};

//The instance struct for GlobalGameEventServer perf counters. GET_INSTANCE returns a pointer to one of these
struct PERFCOUNTER_INSTANCE_GlobalGameEventServer:PERFINSTANCE_BASE
{
	ULONGLONG GlobalGameEventServerSimulationFrames;
	ULONGLONG GlobalGameEventServerSimulationFrameRate;
};

struct GlobalGameEventServer_data_header
{
	PERF_OBJECT_TYPE  ObjectType;
	PERF_COUNTER_DEFINITION GlobalGameEventServerSimulationFramesDef;
	PERF_COUNTER_DEFINITION GlobalGameEventServerSimulationFrameRateDef;
};

static const DWORD DEFAULT_SHARED_MEMORY_SIZE = sizeof(UserServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_UserServer) + sizeof(GameServerThread_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_GameServerThread) + sizeof(GameServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_GameServer) + sizeof(CHAT_SERVER_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_CHAT_SERVER) + sizeof(DATABASE_POOL_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_DATABASE_POOL) + sizeof(CMemoryAllocator_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_CMemoryAllocator) + sizeof(LoginServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_LoginServer) + sizeof(MuxServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_MuxServer) + sizeof(MuxClientImpl_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_MuxClientImpl) + sizeof(HLOCK_LIB_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_HLOCK_LIB) + sizeof(PatchServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_PatchServer) + sizeof(GameLoadBalanceServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_GameLoadBalanceServer) + sizeof(CommonNetWorker_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_CommonNetWorker) + sizeof(CommonNetServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_CommonNetServer) + sizeof(CommonNetBufferPool_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_CommonNetBufferPool) + sizeof(BillingProxy_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_BillingProxy) + sizeof(CSRBridgeServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_CSRBridgeServer) + sizeof(BattleServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_BattleServer) + sizeof(GlobalGameEventServer_data_header) + DEFAULT_NUM_INSTANCES*sizeof(PERFCOUNTER_INSTANCE_GlobalGameEventServer) + 0;

#define PERF_GET_INSTANCE(obj,name) (PERF_INSTANCE(obj)*)PerfHelper::CreateInstance(PERFCOUNTER_OBJECT_TYPE_##obj,name)

#define PERF_FREE_INSTANCE(ptr) PerfHelper::Free(ptr)

#define PERF_INSTANCE(obj) PERFCOUNTER_INSTANCE_##obj

#if _WIN32_WINNT > 0x0501

#define PERF_ADD64(ptr,objtype,counter,value)  InterlockedExchangeAdd64((LONGLONG*)&(((PERFCOUNTER_INSTANCE_##objtype*)ptr)->counter),(value))
#else

#define PERF_ADD64(ptr,objtype,counter,value)  FakeInterlockedExchangeAdd64((LONGLONG*)&(((PERFCOUNTER_INSTANCE_##objtype*)ptr)->counter),(value))
#endif
