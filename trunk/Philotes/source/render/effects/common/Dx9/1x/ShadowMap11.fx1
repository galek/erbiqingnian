//
// Shadow Map - renders geometry into the shadow map texture, recording depth
//
// CHB 2006.07.14 - This was effectively copied-and-pasted from
// ShadowMap.fx for use with a reduced number of bones. If it turns
// out regular maintenance is required, a better way of sharing code
// should be used.
//
#include "_common.fx"
#include "dx9/_AnimatedShared11.fxh"
#include "../../source/Dx9/dx9_shadowtypeconstants.h"
#include "StateBlocks.fxh"


// transformations
//////////////////////////////////////////////////////////////////////////////////////////////
struct VS_SHADOWMAP_INPUT
{
    float4 Position  : POSITION;
    float2 TexCoords : TEXCOORD0;
};

struct PS_SHADOWMAP_INPUT
{
    float4 Position  : POSITION;
	//float3 TexCoordsCopy : TEXCOORD0;
	float2 TexCoords : TEXCOORD_(SAMPLER_DIFFUSE);
};

//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------
PS_SHADOWMAP_INPUT VS_SHADOWMAP ( VS_SHADOWMAP_INPUT In ) 
{
    PS_SHADOWMAP_INPUT Out = (PS_SHADOWMAP_INPUT)0;

    // Compute the projected coordinates
    Out.Position = mul( In.Position,  WorldViewProjection );

    Out.TexCoords = In.TexCoords.xy;
    //Out.TexCoordsCopy = In.TexCoords.xyx;
    
    return Out;
}

//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------
PS_SHADOWMAP_INPUT VS_ANIMATED_SHADOWMAP ( VS_ANIMATED_INPUT In ) 
{
    PS_SHADOWMAP_INPUT Out = (PS_SHADOWMAP_INPUT)0;

	float4 Position;
	half3 Normal;
	GetPositionCheap( Position, In );

    // Compute the projected coordinates
    Out.Position = mul( Position, WorldViewProjection );

    Out.TexCoords = In.DiffuseMap.xy;
    //Out.TexCoordsCopy = In.DiffuseMap.xyx;

    return Out;
}

float4 PS_SHADOWMAP ( PS_SHADOWMAP_INPUT In, uniform bool bAlphaTest ) : COLOR
{
    float4 cColor;

	cColor.xyz = 0; 
	cColor.w = tex2D( DiffuseMapSampler, In.TexCoords.xy ).z;    
	//cColor.xy = In.TexCoordsCopy.xy;
	//cColor.z = 0.0f;
    AlphaTest(bAlphaTest, cColor );
    return cColor;
}

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
DECLARE_TECH RigidShader < SHADER_VERSION_11 int Index = 0; int ShadowType = SHADOW_TYPE_ANY; > 
{
    pass P0
    {
        COMPILE_SET_VERTEX_SHADER( vs_1_1, VS_SHADOWMAP());
        COMPILE_SET_PIXEL_SHADER ( _PS_1_1, PS_SHADOWMAP(true));
        DXC_BLEND_NO_COLOR_NO_BLEND;
        //added ZREAD ZWRITE... for shadowmap... to check
        DXC_DEPTHSTENCIL_ZREAD_ZWRITE;

#ifndef ENGINE_TARGET_DX10
		COLORWRITEENABLE	= 0;
        CULLMODE			= NONE;
		AlphaTestEnable		= TRUE;
		ALPHABLENDENABLE	= FALSE;
#endif
    }  
}

//--------------------------------------------------------------------------------------------

DECLARE_TECH AnimatedShader < SHADER_VERSION_11 int Index = 1; int ShadowType = SHADOW_TYPE_ANY; > 
{
    pass P0
    {
        COMPILE_SET_VERTEX_SHADER( vs_1_1, VS_ANIMATED_SHADOWMAP());
        COMPILE_SET_PIXEL_SHADER ( _PS_1_1, PS_SHADOWMAP(true));
        DXC_BLEND_NO_COLOR_NO_BLEND;
        //added ZREAD ZWRITE... for shadowmap... to check
        DXC_DEPTHSTENCIL_ZREAD_ZWRITE;

#ifndef ENGINE_TARGET_DX10
		COLORWRITEENABLE	= 0;        
        CULLMODE			= NONE;
		AlphaTestEnable		= TRUE;
		ALPHABLENDENABLE	= FALSE;
#endif
    }  
}
