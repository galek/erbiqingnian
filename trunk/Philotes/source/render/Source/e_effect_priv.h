#ifndef __E_EFFECT_PRIV_H__
#define __E_EFFECT_PRIV_H__

#include "e_environment.h"

enum EFFECT_FOLDER
{
	EFFECT_FOLDER_FROM_DEF = -1,
	EFFECT_FOLDER_COMMON = 0,
	EFFECT_FOLDER_HELLGATE,
	EFFECT_FOLDER_TUGBOAT,
	// count
	NUM_EFFECT_FOLDERS,
	// specific
	EFFECT_FOLDER_DEFAULT = EFFECT_FOLDER_COMMON,
};

enum EFFECT_SUBFOLDER
{
	EFFECT_SUBFOLDER_NOTDEFINED = -1,
	EFFECT_SUBFOLDER_NONE = 0,
	EFFECT_SUBFOLDER_1X,
	// count
	NUM_EFFECT_SUBFOLDERS,
	// specific
	EFFECT_SUBFOLDER_DEFAULT = EFFECT_SUBFOLDER_NOTDEFINED,
};

enum
{
	EFFECTDEF_FLAGBIT_STATE_FROM_EFFECT = 0,
	EFFECTDEF_FLAGBIT_CAST_SHADOW,
	EFFECTDEF_FLAGBIT_RECEIVE_SHADOW,
	EFFECTDEF_FLAGBIT_ANIMATED,
	EFFECTDEF_FLAGBIT_RENDER_TO_Z,
	EFFECTDEF_FLAGBIT_FORCE_ALPHA_PASS,
	EFFECTDEF_FLAGBIT_ALPHA_BLEND,
	EFFECTDEF_FLAGBIT_ALPHA_TEST,
	EFFECTDEF_FLAGBIT_CHECK_FORMAT,
	EFFECTDEF_FLAGBIT_FRAGMENTS,
	EFFECTDEF_FLAGBIT_FORCE_LIGHTMAP,
	EFFECTDEF_FLAGBIT_NEEDS_NORMAL,
	EFFECTDEF_FLAGBIT_COMPRESS_TEX_COORD,
	EFFECTDEF_FLAGBIT_SPECULAR_LUT,
	EFFECTDEF_FLAGBIT_USE_BG_SH_COEFS,
	EFFECTDEF_FLAGBIT_USE_GLOBAL_LIGHTS,
	EFFECTDEF_FLAGBIT_LOD_TRANS_SPECULAR,
	EFFECTDEF_FLAGBIT_EMITS_GPU_PARTICLES,
	EFFECTDEF_FLAGBIT_IS_SCREEN_EFFECT,
	EFFECTDEF_FLAGBIT_LOAD_ALL_TECHNIQUES,
	EFFECTDEF_FLAGBIT_RECEIVE_RAIN,
	EFFECTDEF_FLAGBIT_ONE_PARTICLE_SYSTEM,
	EFFECTDEF_FLAGBIT_USES_PORTALS,
	EFFECTDEF_FLAGBIT_REQUIRES_HAVOKFX,
	EFFECTDEF_FLAGBIT_DIRECTIONAL_IN_SH,
	EFFECTDEF_FLAGBIT_EMISSIVE_DIFFUSE,
	// count
	NUM_EFFECT_DEF_FLAGS,
};

enum SHADER_TYPE
{
	SHADER_TYPE_INVALID		= -1,
	SHADER_TYPE_INDOOR		= LEVEL_LOCATION_INDOOR,
	SHADER_TYPE_OUTDOOR		= LEVEL_LOCATION_OUTDOOR,
	SHADER_TYPE_INDOORGRID	= LEVEL_LOCATION_INDOORGRID,
	SHADER_TYPE_FLASHLIGHT	= LEVEL_LOCATION_FLASHLIGHT,
	NUM_SHADER_TYPES,
	SHADER_TYPE_DEFAULT		= SHADER_TYPE_INDOOR
};

enum VERTEX_DECL_TYPE
{
	// If you add/remove/reorder, be sure to update gpVertexTypeData in dxC_state.cpp in parallel.
	VERTEX_DECL_INVALID = -1,
	VERTEX_DECL_SIMPLE = 0,
	VERTEX_DECL_RIGID_64,
	VERTEX_DECL_RIGID_32,
	VERTEX_DECL_RIGID_16,
	VERTEX_DECL_ANIMATED,
	VERTEX_DECL_ANIMATED_11,
	VERTEX_DECL_PARTICLE_MESH,
	VERTEX_DECL_PARTICLE_MESH_11,
	VERTEX_DECL_PARTICLE_MESH_HAVOKFX,
	VERTEX_DECL_PARTICLE_HAVOKFX_PARTICLE,
	VERTEX_DECL_XYZ_COL,
	VERTEX_DECL_XYZ_COL_UV,
	VERTEX_DECL_XYZ_UV,
	VERTEX_DECL_PARTICLE_QUAD,
	VERTEX_DECL_GPU_PARTICLE,
	VERTEX_DECL_PARTICLE_SIMULATION,
	VERTEX_DECL_FLUID_SIMULATION_INPUT,
	VERTEX_DECL_VS_FLUID_RENDERING_INPUT,
	VERTEX_DECL_FULLSCREEN_QUAD,
	VERTEX_DECL_RIGID_ZBUFFER,
	VERTEX_DECL_ANIMATED_ZBUFFER,
	VERTEX_DECL_ANIMATED_ZBUFFER_11,	// CHB 2006.12.29
	VERTEX_DECL_R3264_POS_TEX,			// AE 2007.05.01
	VERTEX_DECL_R16_POS_TEX,			// AE 2007.05.01
	VERTEX_DECL_ANIMATED_POS_TEX,		// AE 2007.05.01
	// "virtual" vert decl types -- will be remapped to a specific version above at lookup-time
	// count
	NUM_VERTEX_DECL_TYPES,
	VERTEX_DECL_VIRTUAL_TYPES = NUM_VERTEX_DECL_TYPES,
};

enum TECHINQUE_GROUP_ENUM 
{
	TECHNIQUE_GROUP_MODEL = 0,
	TECHNIQUE_GROUP_PARTICLE = 1,
	TECHNIQUE_GROUP_BLUR = 2,
	TECHNIQUE_GROUP_GENERAL = 3,
	TECHNIQUE_GROUP_SHADOW,
	TECHNIQUE_GROUP_LIST,
	TECHNIQUE_GROUP_MAX
};

struct SHADER_TYPE_DEFINITION
{
	char						pszShaderName[ MAX_XML_STRING_LENGTH ];
	int							nEffectIndex [ NUM_SHADER_TYPES ];			// line of the specified effect in the effects_index spreadsheet
	BOOL						bNoCollide;
	BOOL						bForParticles;

	int							nEffectFile  [ NUM_SHADER_TYPES ];			// line of the specified effect in the effects_file spreadsheet
	int							nEffectID    [ NUM_SHADER_TYPES ];			// ID of the actual d3d_effect
};

// order matters: higher number == more advanced
enum EFFECT_TARGET
{
	FXTGT_INVALID = -1,
	FXTGT_FIXED_FUNC = 0,
	FXTGT_SM_11,
	FXTGT_SM_20_LOW,
	FXTGT_SM_20_HIGH,
	FXTGT_SM_30,
	FXTGT_SM_40,
	// count
	NUM_EFFECT_TARGETS
};

struct EFFECT_INDEX
{
	char						pszEffectName[ MAX_XML_STRING_LENGTH ];
	int							pnFXOIndex[ NUM_EFFECT_TARGETS ];
	BOOL						bRequired;
};

struct EFFECT_DEFINITION
{
	char						pszFXOName[ MAX_XML_STRING_LENGTH ];
	char						pszFXFileName[ MAX_XML_STRING_LENGTH ];
	EFFECT_FOLDER				eFolder;
	EFFECT_SUBFOLDER			eSubFolder;
	int							nD3DEffectId;

	float						fRangeToLOD;
	int							nLODEffectIndex;
	int							nLODEffectDef;
	int							nLODD3DEffectId;

	DWORD						dwFlags[ DWORD_FLAG_SIZE(NUM_EFFECT_DEF_FLAGS) ];

	VERTEX_DECL_TYPE			eVertexFormat;
	int							nTechniqueGroup;
	int							nStaticBranchDepthVS;
	int							nStaticBranchDepthPS;
};

void e_EffectsFillpak();
void e_EffectsFillMinpak();
PRESULT e_GetFullEffectInfoString( int nEffectID );
PRESULT e_GetEffectListString( char * szStr, int nBufLen );
PRESULT e_DumpEffectReport();

#endif // __E_EFFECT_PRIV_H__
