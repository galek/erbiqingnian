//----------------------------------------------------------------------------
// e_math.h
//
// (C)Copyright 2003, Flagship Studios. All rights reserved.
//----------------------------------------------------------------------------

#ifndef __E_MATH__
#define __E_MATH__

#include "e_settings.h"

//----------------------------------------------------------------------------
// DEFINES
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// MACROS
//----------------------------------------------------------------------------

#define SQRT_SAFE(flt)		( ((flt) > 0.f) ? sqrtf(flt) : 0.f )

//----------------------------------------------------------------------------
// ENUMS
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// TYPEDEFS
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// FORWARD DECLARATIONS
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// STRUCTS
//----------------------------------------------------------------------------

struct RANGE2
{
	float n;		// near
	float f;		// far

	inline float Span() { return f-n; }
};

//----------------------------------------------------------------------------
// INLINES
//----------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

inline float e_GetVerticalFOV( float fHorizontalFOV )
{
	float fAspect = e_GetWindowAspect();
	return (fHorizontalFOV / fAspect);
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

inline float e_GetHorizontalFOV( float fVerticalFOV )
{
	float fAspect = e_GetWindowAspect();
	return (fVerticalFOV * fAspect);
}

//----------------------------------------------------------------------------
// HEADERS
//----------------------------------------------------------------------------

// Returns the 0..1 screen contribution of fSize meters diameter at fDistance meters away from the eye.
float e_GetWorldDistanceUnbiasedScreenSizeByVertFOV( float fDistance, float fSize, float fVerticalFOVRad );
float e_GetWorldDistanceUnbiasedScreenSizeByVertFOV( float fDistance, float fSize, const struct CAMERA_INFO * pInfo = NULL );
float e_GetWorldDistanceBiasedScreenSizeByVertFOV( float fDistance, float fSize );

#endif // __E_MATH__
