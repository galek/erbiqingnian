//----------------------------------------------------------------------------
// FILE: interact.h
//
// (C)Copyright 2006, Flagship Studios. All rights reserved.
//----------------------------------------------------------------------------

#ifdef __INTERACT_H_
//#pragma message ("    HINT: " __FILE__ " included multiple times in this translation unit")
#else
#define __INTERACT_H_

//----------------------------------------------------------------------------
// Includes
//----------------------------------------------------------------------------
#include "../data_common/excel/interact_hdr.h"  // auto generated by .xls

//----------------------------------------------------------------------------
// Forward declarations
//----------------------------------------------------------------------------
struct UNIT;
struct INTERACT_MENU_CHOICE;

//----------------------------------------------------------------------------
// Types
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
enum INTERACT_CONSTANTS
{
	INTERACT_MENU_ICON_FRAME_LENGTH = 64,
};

//----------------------------------------------------------------------------
enum INTERACT_INFO
{
	INTERACT_INFO_INVALID = -1,
	
	INTERACT_INFO_NONE,			// npc has no important info
	INTERACT_INFO_UNAVAILABLE,	// npc has new info, but the player does not meet some requirement (can't accept quest)
	INTERACT_INFO_NEW,			// npc has new info to give (like giving a quest)
	INTERACT_INFO_WAITING,		// npc is waiting for the player to do something
	INTERACT_INFO_RETURN,		// npc is waiting for player to return (they have done the "thing" they were waiting for)
	INTERACT_INFO_MORE,			// npc has already told you info, but you can still talk to them about the same quest...

	INTERACT_STORY_NEW,			// npc has a new storyline quest to give
	INTERACT_STORY_RETURN,		// npc has more storyline info for the player
	INTERACT_STORY_GOSSIP,		// npc has storyline gossip to give

	INTERACT_HOLIDAY_NEW,		// npc has a holiday quest to give
	INTERACT_HOLIDAY_RETURN,	// npc has more holiday info for the player
		
	NUM_INTERACT_INFO_TYPES
};

//----------------------------------------------------------------------------
struct INTERACT_DATA
{
	char szName[ DEFAULT_INDEX_SIZE ];
	BOOL bFaceDuringInteraction;
	BOOL bAllowGhost;
	int nPriority;
	BOOL bSetTalkingTo;
	BOOL bPlayGreeting;
	int nInteractMenu;
};

//----------------------------------------------------------------------------
struct INTERACT_MENU_DATA
{
	char szName[ DEFAULT_INDEX_SIZE ];	// row name
	int nInteraction;					// link to interact table of the interaction to do when the button is hit
	int nStringTitle;					// in theory, we would display this text on the menu button					
	int nStringTooltip;					// tooltip for the menu button when you hover it
	char szIconFrame[ INTERACT_MENU_ICON_FRAME_LENGTH ];  // image name
	int nButtonNum;						// which button on the radial menu this should go on
};

struct UI_COMPONENT;

//----------------------------------------------------------------------------
// Prototypes
//----------------------------------------------------------------------------

const INTERACT_DATA *InteractGetData(
	UNIT_INTERACT eInteract);

const INTERACT_MENU_DATA *InteractMenuGetData(
	int nInteractMenu);

void c_InteractDisplayChoices(
	UNIT *pPlayer,
	UNIT *pUnit,
	const INTERACT_MENU_CHOICE *ptInteractChoicesIn,
	int nNumChoices,
	UI_COMPONENT *pComponent = NULL,
	PGUID guid = INVALID_GUID);
	
void c_InteractRequestChoices(
	UNIT *pTarget,
	UI_COMPONENT *pComponent = NULL,
	PGUID guid = INVALID_GUID);

int x_InteractGetChoices(
	UNIT *pPlayer,
	UNIT *pTarget,
	INTERACT_MENU_CHOICE *ptBuffer,
	int nBufferSize,
	UI_COMPONENT *pComponent = NULL,
	PGUID guid = INVALID_GUID);

BOOL InteractAddChoice(
	UNIT *pUser,
	UNIT_INTERACT eInteract,
	BOOL bEnabled,
	int *pnCurrentCount,
	INTERACT_MENU_CHOICE *ptBuffer,
	int nBufferSize,
	int nOverrideTooltipId = -1);

void s_UnitInteract( 
	UNIT *pPlayer, 
	UNIT *pTarget,
	UNIT_INTERACT eInteract);

void c_InteractInfoSet(
	GAME *pGame,
	UNITID idNPC, 
	INTERACT_INFO eInfo);
		
INTERACT_INFO c_NPCGetInfoState(
	UNIT * npc );

void s_InteractCancelUnitsTooFarAway(
	UNIT *pPlayer);

void s_InteractCancelAll(
	UNIT *pPlayer);

#endif