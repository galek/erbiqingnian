//----------------------------------------------------------------------------
// c_message.h
//
// (C)Copyright 2003, Flagship Studios. All rights reserved.
//
// CLIENT to SERVER messages
//
// To add a new message "MYMESSAGE":
// 1: add a "CCMD_MYMESSAGE" to the ENUMERATIONS section in this file
// 2: add a DEF_MSG_STRUCT("CCMD_MYMESSAGE") in the STRUCTURES section in this file
//----------------------------------------------------------------------------
#ifndef	_C_MESSAGE_H_
#define _C_MESSAGE_H_


//----------------------------------------------------------------------------
// INLUDES
//----------------------------------------------------------------------------
#ifndef _LEVEL_H_
#include "level.h"
#endif

#ifndef _CLIENTS_H_
#include "clients.h"
#endif

#ifndef _MESSAGE_H_
#include "message.h"
#endif

#ifndef _CHATSERVER_H_
#include "ServerSuite/Chat/ChatServer.h"
#endif

#ifndef _GAME_H_
#include "game.h"
#endif

#ifndef _COMMONCHATMESSAGES_H_
#include "ServerSuite/Chat/CommonChatMessages.h"
#endif

#include "ServerSuite/AuctionServer/AuctionServerDefines.h"
#include "ServerSuite/Database/DatabaseGame.h"

//----------------------------------------------------------------------------
// MESSAGE STRUCTURES
//----------------------------------------------------------------------------

DEF_MSG_STRUCT(MSG_CCMD_PLAYERNEW)
	MSG_WCHAR(0, szCharName, MAX_CHARACTER_NAME)
	MSG_FIELD(1, BYTE, bPlayerSlot, -1)
	MSG_FIELD(2, BYTE, bNewPlayer, FALSE)
	MSG_FIELD(3, BYTE, bClass, -1)
	MSG_FIELD(4, BYTE, bHeight, 125)
	MSG_FIELD(5, BYTE, bWeight, 125)
	MSG_FIELD(6, ULONGLONG,qwBuildVersion, -1)
	MSG_ARRAY(7, BYTE, bufWardrobeInit, MAX_WARDROBE_INIT_BUFFER)
	MSG_FIELD(8, BYTE, bGem, 0)
	MSG_FIELD(9, int, nDifficulty, INVALID_LINK)
	MSG_FIELD(10, DWORD, dwNewPlayerFlags, 0)  // see NEW_PLAYER_FLAGS
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_NEW_ITEM_COLLECTION)
	MSG_FIELD(0, DWORD, dwAppClientID, -1)
	MSG_FIELD(1, DWORD, dwUntiCollectionID, -1)
	MSG_FIELD(2, PGUID, guidDestPlayer, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_DELETE_ITEM)
	MSG_FIELD(0, PGUID, guidItemToDelete, -1)
	MSG_FIELD(1, BYTE, bInformDatabase, TRUE)	
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_MAIL_SEND_RESULT)
	MSG_FIELD(0, PGUID, guidPlayerSender, INVALID_GUID)
	MSG_FIELD(1, PGUID, guidPlayerReceiver, INVALID_GUID)
	MSG_FIELD(2, PGUID, idMailMsg, INVALID_GUID)
	MSG_FIELD(3, int, nMailResult, -1)			// see enum MailResult
	MSG_FIELD(4, ULONGLONG, uContext, 0)
	MSG_FIELD(5, PGUID, guidAttachment, INVALID_GUID)
	MSG_STRUC(6, INVENTORY_LOCATION, tInvLocation)		
	MSG_FIELD(7, int, nMailFees, 0)		
	MSG_FIELD(8, int, nAttachedMoney, 0)		
	MSG_FIELD(9, BYTE, bLetDbHandleMoney, TRUE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_MAIL_TAKE_ATTACHED_MONEY)
	MSG_FIELD(0, PGUID, guidPlayerReceiver, INVALID_GUID)
	MSG_FIELD(1, PGUID, idMailMsg, INVALID_GUID)
	MSG_FIELD(2, int, nMailResult, -1)			// see enum MailResult
	MSG_FIELD(3, ULONGLONG, uContext, 0)
	MSG_FIELD(4, int, nAttachedMoney, 0)		
END_MSG_STRUCT

// only sent server to self
DEF_MSG_STRUCT(MSG_APPCMD_PLAYER_IN_CHAT_SERVER)
END_MSG_STRUCT

// only sent server to self
DEF_MSG_STRUCT(MSG_APPCMD_CHAT_CHANNEL_CREATED)
	MSG_FIELD(0, ULONGLONG, idLevel,		INVALID_ID)
	MSG_FIELD(1, CHANNELID,	idChatChannel,	INVALID_CHANNELID)
END_MSG_STRUCT

// only sent server to self
DEF_MSG_STRUCT(MSG_APPCMD_AUTO_PARTY_CREATED)
	MSG_FIELD(0, int, idParty, INVALID_ID)
	MSG_FIELD(1, ULONGLONG, ullRequestCode, (ULONGLONG)-1)
END_MSG_STRUCT

// only sent server to self, game mailbox.
DEF_MSG_STRUCT(MSG_APPCMD_TAKE_OVER_CLIENT)
MSG_FIELD(0, ULONGLONG, idNetClientNew, INVALID_NETCLIENTID64)
MSG_FIELD(1, ULONGLONG, idNetClientOld, INVALID_NETCLIENTID64)
MSG_FIELD(2, ULONGLONG, idAccount, INVALID_UNIQUE_ACCOUNT_ID)
END_MSG_STRUCT

// only server to self, game mailbox
DEF_MSG_STRUCT(MSG_APPCMD_PLAYERGAG)
	MSG_FIELD(0, int, nGagAction, 0)			// see GAG_ACTION enum
END_MSG_STRUCT

//----------------------------------------------------------------------------
// trying to stay within server runner small message size limit and be
// able to support the biggest request to date for the utility
// game by storing a UTILITY_GAME_CSR_EMAIL in the byMessageData field
#define MAX_UTILITY_GAME_MESSAGE_SIZE	(1880) 

// only server to self, game mailbox
DEF_MSG_STRUCT(MSG_APPCMD_UTILITY_GAME_REQUEST)
	MSG_FIELD(0, DWORD, dwUtilityGameAction, -1)		// see UTILITY_GAME_ACTION enum
	MSG_ARRAY(1, BYTE, byMessageData, MAX_UTILITY_GAME_MESSAGE_SIZE)	
	MSG_FIELD(2, DWORD, dwMessageSize, 0)
END_MSG_STRUCT

// only server to self, game mailbox
DEF_MSG_STRUCT(MSG_APPCMD_IN_GAME_DB_CALLBACK)
	MSG_FIELD(0, BYTE, bSuccess, 0)
	MSG_FIELD(1, GAMEID, idGame, INVALID_GAMEID)
	MSG_FIELD(2, ULONGLONG, ullCallbackFunctionPointer, 0)
	MSG_ARRAY(3, BYTE, bCallbackData, MAX_DB_CALLBACK_DATA )
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_OPEN_PLAYER_FILE_START)
	MSG_WCHAR(0, szCharName, MAX_CHARACTER_NAME)
	MSG_FIELD(1, int, nDifficultySelected, INVALID_LINK)
	MSG_FIELD(2, DWORD, dwCRC, 0)
	MSG_FIELD(3, DWORD, dwSize, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_OPEN_PLAYER_FILE_CHUNK)
	MSG_BLOBW(0, buf, MAX_PLAYERSAVE_BUFFER)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_DATABASE_PLAYER_FILE_START)
	MSG_WCHAR(0, szCharName, MAX_CHARACTER_NAME)
	MSG_FIELD(1, DWORD, dwCRC, 0)
	MSG_FIELD(2, DWORD, dwSize, 0)
	MSG_FIELD(3, int, nCollectionType, -1)			// see UNIT_COLLECTION_TYPE
	MSG_FIELD(4, DWORD, dwCollectionID, -1)			// a UNIT_COLLECTION_ID
	MSG_FIELD(5, PGUID, guidUnitTreeRoot, INVALID_GUID)
	MSG_FIELD(6, PGUID, guidDestPlayer, INVALID_GUID)
	MSG_FIELD(7, int, nLoadType, -1)				// see PLAYER_LOAD_TYPE	
	MSG_FIELD(8, DWORD, idAppClient, INVALID_CLIENTID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_DATABASE_PLAYER_FILE_CHUNK)
	MSG_BLOBW(0, buf, MAX_PLAYERSAVE_BUFFER)
	MSG_FIELD(1, int, nCollectionType, -1)		// see UNIT_COLLECTION_TYPE
	MSG_FIELD(2, DWORD, dwCollectionID, -1)			// a UNIT_COLLECTION_ID	
	MSG_FIELD(3, DWORD, idAppClient, INVALID_CLIENTID)
END_MSG_STRUCT

//WARP_SPEC moved to message.h
// only sent server to self
DEF_MSG_STRUCT(MSG_APPCMD_SWITCHINSTANCE)
	MSG_FIELD(0, DWORD, dwKey, 0)
	MSG_FIELD(1, int, nLevelDefLeaving, INVALID_LINK)		// the level they player was leaving	
	MSG_STRUC(2, TOWN_PORTAL_SPEC, tTownPortal)				// the town portal in our reserved game (if any)
	MSG_FIELD(3, int, nLevelDefLastHeadstone, INVALID_LINK)	// the level our headstone is in (if any)
	MSG_STRUC(4, WARP_SPEC, tWarpSpec)						// destination of warp
	MSG_FIELD(5, DWORD, dwSeed, 0)							// tugboat
	MSG_FIELD(6, DWORD, dwSwitchInstanceFlags, 0)			// see SWITCH_INSTANCE_FLAGS
	MSG_FIELD(7, PGUID, guidPlayer, INVALID_GUID)			// used in server switches
	MSG_FIELD(8, int, nDifficulty, 0)						// difficulty this character is currently choosing to play
	MSG_STRUC(9, GAME_VARIANT, tGameVariant)				// game variant this player has chosen
END_MSG_STRUCT

// only sent server to self
// Note: the dwKey is unnecessary since fakeness is verified at a server level,
// but we'll leave it in because the cost is insignificant and redundancy is good.
DEF_MSG_STRUCT(MSG_CCMD_UNRESERVEGAME)
	MSG_FIELD(0, DWORD, dwReserveKey, 0)
	MSG_FIELD(1, PGUID, guid, 0)	
	END_MSG_STRUCT	

DEF_MSG_STRUCT(MSG_APPCMD_SWITCHSERVER)
	MSG_WCHAR(0, szCharName, MAX_CHARACTER_NAME)
	MSG_STRUC(1, WARP_SPEC, tWarpSpec)
	MSG_FIELD(2, GAMEID, idGameToJoin, INVALID_ID)
	MSG_FIELD(3, int, nGameServer, -1)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PARTY_ADVERTISE)
	MSG_WCHAR(0, szPartyDesc, PARTY_DESC_SIZE)
	MSG_FIELD(1, int, nMaxPlayers, -1)
	MSG_FIELD(2, int, nMinLevel, -1)
	MSG_FIELD(3, int, nMaxLevel, -1)
	MSG_FIELD(4, BYTE, bVerifyJoin, FALSE)
	MSG_FIELD(5, BYTE, bForSinglePlayerOnly, FALSE)
	MSG_FIELD(6, BYTE, nMatchType, 0)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PARTY_UNADVERTISE)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TOGGLE_AUTO_PARTY)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PVP_TOGGLE)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PLAYERREMOVE)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_LEVELLOADED)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REQMOVE)
	MSG_BLOBB(0, buffer, MAX_REQMOVE_MSG_BUFFER_SIZE )
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_UNITMOVEXYZ)
	MSG_FIELD(0, BYTE, bFlags, 0)
	MSG_FIELD(1, int, mode, 0)
	MSG_FIELD(2, float, fVelocity, 0.0f)
	MSG_STRUC(3, MSG_VECTOR, TargetPosition)
	MSG_STRUC(4, MSG_NVECTOR, MoveDirection)
	MSG_BLOBW(5, buf, MAX_PATH_BUFFER)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_UNITSETFACEDIRECTION)
	MSG_STRUC(0, MSG_NVECTOR, FaceDirection)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_UNIT_PATH_POSITION_UPDATE)
	MSG_FIELD(0, ROOMID, idPathRoom, INVALID_ID)
	MSG_FIELD(1, int, nPathIndex, -1)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_UNITWARP)
	MSG_FIELD(0, DWORD, dwUnitWarpFlags, 0)
	MSG_FIELD(1, ROOMID, idRoom, INVALID_ID)
	MSG_STRUC(2, MSG_VECTOR, vPosition)
	MSG_STRUC(3, MSG_NVECTOR, vFaceDirection)
	MSG_STRUC(4, MSG_NVECTOR, vUpDirection)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PLAYER_FELL_OUT_OF_WORLD)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLSAVEASSIGN)
	MSG_FIELD(0, short, wSkill, -1)
	MSG_FIELD(1, BYTE, bySkillAssign, 0)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLSTART)
	MSG_STRUC(0, MSG_VECTOR, vPosition)
	MSG_FIELD(1, short, wSkill, -1)
	MSG_STRUC(2, MSG_VECTOR, vWeaponPosition)
	MSG_STRUC(3, MSG_NVECTOR, vWeaponDirection)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLSTARTXYZ)
	MSG_STRUC(0, MSG_VECTOR, vPosition)
	MSG_STRUC(1, MSG_VECTOR, vTarget)
	MSG_FIELD(2, short, wSkill, -1)
	MSG_STRUC(3, MSG_VECTOR, vWeaponPosition)
	MSG_STRUC(4, MSG_NVECTOR, vWeaponDirection)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLSTARTID)
	MSG_STRUC(0, MSG_VECTOR, vPosition)
	MSG_FIELD(1, UNITID, idTarget, INVALID_ID)
	MSG_FIELD(2, short, wSkill, -1)
	MSG_STRUC(3, MSG_VECTOR, vWeaponPosition)
	MSG_STRUC(4, MSG_NVECTOR, vWeaponDirection)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLSTARTXYZID)
	MSG_STRUC(0, MSG_VECTOR, vPosition)
	MSG_STRUC(1, MSG_VECTOR, vTarget)
	MSG_FIELD(2, UNITID, idTarget, INVALID_ID)
	MSG_FIELD(3, short, wSkill, -1)
	MSG_STRUC(4, MSG_VECTOR, vWeaponPosition)
	MSG_STRUC(5, MSG_NVECTOR, vWeaponDirection)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLCHANGETARGETID)
	MSG_FIELD(0, short, wSkill, -1)
	MSG_FIELD(1, UNITID, idTarget, INVALID_ID)
	MSG_FIELD(2, UNITID, idWeapon, INVALID_ID)
	MSG_FIELD(3, BYTE, bIndex, 0)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLSTOP)
	MSG_FIELD(0, short, wSkill, -1)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLSHIFT_ENABLE)
	MSG_FIELD(0, short, wSkill, -1)
	MSG_FIELD(1, BYTE, bEnabled, 1)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PLAYER_RESPAWN)
	MSG_FIELD(0, int, nPlayerRespawn, -1)	// see PLAYER_RESPAWN
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PICKUP)
	MSG_FIELD(0, UNITID, id, INVALID_ID)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_INVEQUIP)
	MSG_FIELD(0, UNITID, id, INVALID_ID)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_INVDROP)
	MSG_FIELD(0, UNITID, id, INVALID_ID)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_INVPUT)
	MSG_FIELD(0, UNITID, idContainer, INVALID_ID)
	MSG_FIELD(1, UNITID, idItem, INVALID_ID)
	MSG_FIELD(2, BYTE, bLocation, 0)
	MSG_FIELD(3, BYTE, bX, 0)
	MSG_FIELD(4, BYTE, bY, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_INVSWAP)
	MSG_FIELD(0, UNITID, idSrc, INVALID_ID)
	MSG_FIELD(1, UNITID, idDest, INVALID_ID)
	MSG_FIELD(2, int, nFromWeaponConfig, -1)
	MSG_FIELD(3, int, nAltDestX, -1)
	MSG_FIELD(4, int, nAltDestY, -1)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_DOUBLEEQUIP)
	MSG_FIELD(0, UNITID, idItem1, INVALID_ID)
	MSG_FIELD(1, UNITID, idItem2, INVALID_ID)
	MSG_FIELD(2, BYTE, bLocation1, 0)
	MSG_FIELD(3, BYTE, bLocation2, 0)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ITEMINVPUT)
	MSG_FIELD(0, UNITID, idContainer, INVALID_ID)
	MSG_FIELD(1, UNITID, idItem, INVALID_ID)
	MSG_FIELD(2, BYTE, bLocation, 0)
	MSG_FIELD(3, BYTE, bX, 0)
	MSG_FIELD(4, BYTE, bY, 0)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_INVUSE)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_STRUC(1, MSG_VECTOR, TargetPosition)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_INVUSEON)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_FIELD(1, UNITID, idTarget, INVALID_ID)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_INVSHOWINCHAT)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_HOTKEY)
	MSG_ARRAY(0, UNITID, idItem, MAX_HOTKEY_ITEMS)
	MSG_ARRAY(1, int, nSkillID, MAX_HOTKEY_SKILLS)
	MSG_FIELD(2, BYTE, bHotkey, 0)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ADD_WEAPONCONFIG)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_FIELD(1, BYTE, bSuggestedPos, 0)
	MSG_FIELD(2, BYTE, bHotkey, 0)
	MSG_FIELD(3, int, nFromWeaponConfig, -1)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SELECT_WEAPONCONFIG)
	MSG_FIELD(0, BYTE, bHotkey, 0)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_CHEAT)
	MSG_FIELD(0, BYTE, bCheatCmd, 0)
	MSG_FIELD(1, DWORD, dwCheatParam, 0)
	MSG_WCHAR(2, str, MAX_CHEAT_LEN)
	END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_INTERACT) //this use to be INTERACTID in tugboat. It does the same thing.
	MSG_FIELD(0, UNITID, idTarget, INVALID_ID)
	MSG_FIELD(1, BYTE, nInteract, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_QUEST_INTERACT_DIALOG) // Does quest interaction on a specified quest id
MSG_FIELD(0, UNITID, idTarget, INVALID_ID)
MSG_FIELD(1, int, nQuestID, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REQUEST_INTERACT_CHOICES)
	MSG_FIELD(0, UNITID, idUnit, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLSELECT)
	MSG_FIELD(0, short, wSkill, -1)
	MSG_FIELD(1, DWORD, dwSeed, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLDESELECT)
	MSG_FIELD(0, short, wSkill, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SKILLPICKMELEESKILL)
	MSG_FIELD(0, short, wSkill, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ALLOCSTAT)
	MSG_FIELD(0, WORD, wStat, 0)
	MSG_FIELD(1, DWORD, dwParam, 0)
	MSG_FIELD(2, int, nPoints, 0)
	MSG_FIELD(3, UNITID, idUnit, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ABORTQUEST)
	MSG_FIELD(0, UNITID, idPlayer, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SETDEBUGUNIT)
	MSG_FIELD(0, UNITID, idDebugUnit, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EXIT_GAME)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ITEMSELL)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_FIELD(1, UNITID, idSellTo, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ITEMBUY)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_FIELD(1, UNITID, idBuyFrom, INVALID_ID)
	MSG_FIELD(2, int, nSuggestedLocation, INVALID_ID)
	MSG_FIELD(3, int, nSuggestedX, INVALID_ID)
	MSG_FIELD(4, int, nSuggestedY, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_CANCEL_IDENTIFY)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRY_IDENTIFY)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_FIELD(1, UNITID, idAnalyzer, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ITEM_PICK_ITEM)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_FIELD(1, UNITID, idItemPicked, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRY_DISMANTLE)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_FIELD(1, UNITID, idItemDismantler, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_RETURN_TO_LOWEST_LEVEL)		// tugboat
END_MSG_STRUCT
	
DEF_MSG_STRUCT(MSG_CCMD_PVP_SIGN_UP_ACCEPT)		
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_BUY_HIRELING)
	MSG_FIELD(0, int, nIndex, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REQUEST_AREA_WARP)	
	MSG_FIELD(0, int, nLevelDepth, INVALID_LINK)
	MSG_FIELD(1, int, nLevelArea, INVALID_LINK)
	MSG_FIELD(2, int, nUnitID, INVALID_ID)	//id of map used to travel to area, so we can destruct it (if it's a temp map)
	MSG_FIELD(3, PGUID, guidPartyMember, INVALID_GUID)
	MSG_FIELD(4, GAMEID, idGameOfPartyMember, INVALID_ID)
	MSG_FIELD(5, int, bSkipRoad, FALSE )
	MSG_FIELD(6, DWORD, dwWarpFlags, 0)
	END_MSG_STRUCT


DEF_MSG_STRUCT(MSG_CCMD_LIST_GAME_INSTANCES)
	MSG_FIELD(0, WORD, nTypeOfInstance, 0)				// Town, PVP game, etc.
	END_MSG_STRUCT


DEF_MSG_STRUCT(MSG_CCMD_WARP_TO_GAME_INSTANCE)	
	MSG_FIELD(0, GAMEID, idGameToWarpTo, INVALID_ID)
	MSG_FIELD(1, WORD, nTypeOfInstance, 0)				// Town, PVP game, etc.
	MSG_FIELD(2, int, m_nLevelDef, INVALID_ID)
END_MSG_STRUCT
	

DEF_MSG_STRUCT(MSG_CCMD_QUEST_TRY_ACCEPT)
	MSG_FIELD(0, UNITID, idQuestGiver, INVALID_ID)
	MSG_FIELD(1, int, nQuestID, INVALID_LINK)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_RECIPE_CLEAR_PLAYER_MODIFICATIONS)		
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_RECIPE_SET_PLAYER_MODIFICATIONS)	
	MSG_FIELD(0, int, nRecipeProperty, INVALID_ID)
	MSG_FIELD(1, int, nRecipePropertyValue, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_RECIPE_TRY_CREATE)
	MSG_FIELD(0, UNITID, idRecipeGiver, INVALID_ID)
	MSG_FIELD(1, int, nRecipe, INVALID_ID)
	MSG_FIELD(2, int, nIndex, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_RECIPE_TRY_BUY)
MSG_FIELD(0, UNITID, idRecipeGiver, INVALID_ID)
MSG_FIELD(1, int, nRecipe, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_RECIPE_CLOSE)
	MSG_FIELD(0, UNITID, idRecipeGiver, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_RECIPE_SELECT)
	MSG_FIELD(0, int, nRecipe, INVALID_LINK)
	MSG_FIELD(1, int, nIndexInRecipeList, INVALID_INDEX)
	MSG_FIELD(2, UNITID, idRecipeGiver, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TASK_TRY_ACCEPT)
	MSG_FIELD(0, int, nTaskID, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TASK_TRY_ABANDON)
	MSG_FIELD(0, int, nTaskID, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TASK_TRY_ACCEPT_REWARD)
	MSG_FIELD(0, int, nTaskID, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_QUEST_TRY_ABANDON)
	MSG_FIELD(0, int, nQuestID, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TALK_DONE)
	MSG_FIELD(0, int, nConversationCompleteType, -1)  // CCT_INVALID
	MSG_FIELD(1, int, nRewardSelection, -1)  // CCT_INVALID
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TUTORIAL_UPDATE)
	MSG_FIELD(0, int, nType, -1)
	MSG_FIELD(1, int, nData, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRY_RETURN_TO_HEADSTONE)
	MSG_FIELD(0, BYTE, bAccept, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REQ_SKILL_UP)
	MSG_FIELD(0, short, wSkill, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REQ_TIER_UP)
MSG_FIELD(0, short, wSkillTab, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REQ_CRAFTING_TIER_UP)
MSG_FIELD(0, short, wSkillTab, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REQ_WEAPONSET_SWAP)
	MSG_FIELD(0, short, wSet, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REQ_SKILL_UNLEARN)
	MSG_FIELD(0, short, wSkill, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AGGRESSION_TOGGLE)
MSG_FIELD(0, UNITID, idTarget, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_CLIENT_QUEST_STATE_CHANGE)
	MSG_FIELD(0, int, nQuest, INVALID_LINK)
	MSG_FIELD(1, int, nQuestState, INVALID_LINK)
	MSG_FIELD(2, int, nValue, -1)			// QUEST_STATE_INVALID
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_OPERATE_WAYPOINT)
	MSG_FIELD(0, int, nLevelDefinition, INVALID_LINK)
	MSG_FIELD(1, int, nLevelArea, INVALID_LINK)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_OPERATE_ANCHORSTONE)
MSG_FIELD(0, int, nIndex, INVALID_ID)
MSG_FIELD(1, int, nAction, INVALID_ID)
MSG_FIELD(2, WORD, wObjectCode, 0)
END_MSG_STRUCT


DEF_MSG_STRUCT(MSG_CCMD_OPERATE_RUNEGATE)
MSG_FIELD(0, UNITID, idRunestone, INVALID_ID)
MSG_FIELD(1, int, nLevelArea, INVALID_LINK)
MSG_FIELD(2, PGUID, guidPartyMember, INVALID_GUID)
MSG_FIELD(3, GAMEID, idGameOfPartyMember, INVALID_ID)
END_MSG_STRUCT


DEF_MSG_STRUCT(MSG_CCMD_TRADE_CANCEL)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRADE_STATUS)
	MSG_FIELD(0, int, nStatus, -1) // see TRADE_STATUS
	MSG_FIELD(1, int, nTradeOfferVersion, NONE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRADE_REQUEST_NEW)
	MSG_FIELD(0, PGUID, guidToTradeWith, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRADE_REQUEST_NEW_CANCEL)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRADE_REQUEST_ACCEPT)
	MSG_FIELD(0, UNITID, idToTradeWith, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRADE_REQUEST_REJECT)
	MSG_FIELD(0, UNITID, idToTradeWith, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRADE_MODIFY_MONEY)
	MSG_FIELD(0, int, nMoney, 0)
	MSG_FIELD(1, int, nRealWorldMoney, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_INSPECT_PLAYER)
	MSG_FIELD(0, UNITID, idToInspect, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_WARP_TO_PLAYER)
	MSG_FIELD(0, PGUID, guidPlayerToWarpTo, INVALID_GUID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SET_PLAYER_OPTIONS)
	MSG_FIELD(0, int, nAllowInspection, 1)
	MSG_FIELD(1, int, nHideHelmet, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REWARD_TAKE_ALL)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REWARD_CANCEL)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_JUMP_BEGIN)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_JUMP_END)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ENTER_TOWN_PORTAL)
	MSG_FIELD(0, UNITID, idPortal, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SELECT_RETURN_DEST)
	MSG_FIELD(0, PGUID, guidOwner, INVALID_ID)
	MSG_STRUC(1, TOWN_PORTAL_SPEC, tTownPortalSpec)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PING)
	MSG_FIELD(0, int, timeOfSend, INVALID_ID)
	MSG_FIELD(1, int, timeOfReceive, INVALID_ID)
	MSG_FIELD(2, int, timeStamp1, INVALID_ID)
	MSG_FIELD(3, int, timeStamp2, INVALID_ID)
	MSG_FIELD(4, BYTE, bIsReply, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PICK_COLORSET)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
END_MSG_STRUCT

//A unified message for all bot cheats, so we easily cut them all of at once.
DEF_MSG_STRUCT(MSG_CCMD_BOT_CHEAT)
	MSG_FIELD(0, BYTE, nCheatType, -1)
	MSG_STRUC(1, MSG_VECTOR, vPosition)
	MSG_FIELD(2, DWORD, dwParam1, INVALID_ID )
	MSG_FIELD(3, DWORD, dwParam2, INVALID_ID )
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PARTY_MEMBER_TRY_WARP_TO)
	MSG_FIELD(0, PGUID, guidPartyMember, -1)	
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PARTY_JOIN_ATTEMPT)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PARTY_ACCEPT_INVITE)
	MSG_FIELD(0, PGUID, guidInviter, -1)	
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_STASH_CLOSE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRY_ITEM_UPGRADE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRY_ITEM_AUGMENT)
	MSG_FIELD(0, BYTE, bAugmentType, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ITEM_UPGRADE_CLOSE)
	MSG_FIELD(0, BYTE, bItemUpgradeType, -1)		// see ITEM_UPGRADE_TYPE
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_TRY_ITEM_UNMOD)
END_MSG_STRUCT

#define MAX_EMOTE_LEN 128

DEF_MSG_STRUCT(MSG_CCMD_EMOTE)
	MSG_WCHAR(0, uszMessage, MAX_EMOTE_LEN)	
	MSG_FIELD(1, int, mode, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_WHO)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_KILLPET)
	MSG_FIELD(0, UNITID, id, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_JOIN_INSTANCING_CHANNEL)
	MSG_WCHAR(0, szInstancingChannelName, 27)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_QUEST_TRACK) // sets whether the player is tracking the quest
	MSG_FIELD(0, int, nQuestID, 0)
	MSG_FIELD(1, int, bTracking, TRUE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AUTO_TRACK_QUESTS) // sets whether the player has auto-tracking enabled
	MSG_FIELD(0, int, bTracking, TRUE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_UI_RELOAD) 
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_REMOVE_FROM_WEAPONCONFIG)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_FIELD(1, int, nWeaponConfig, -1)
END_MSG_STRUCT


DEF_MSG_STRUCT(MSG_CCMD_REQUEST_REAL_MONEY_TXN)
	MSG_FIELD(0, int, iItemCode, 0)
	MSG_WCHAR(1, szItemDesc, 100)
	MSG_FIELD(2, int, iPrice, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ACCOUNT_STATUS_UPDATE)
	MSG_FIELD(0, int, nSubscriptionType, 0)
	MSG_FIELD(1, int, nBillingTimer, 0)
	MSG_FIELD(2, int, nCurrencyBalance, 0)
	MSG_FIELD(3, int, nRemainingTime, 0)
	MSG_FIELD(4, ULONGLONG, RemainingTimeRef, 0) // time_t when nRemainingTime was updated
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ACCOUNT_BALANCE_UPDATE)
	MSG_FIELD(0, int, nCurrencyBalance, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_QUEST_ABANDON)
	MSG_FIELD(0, int, nQuestID, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_MOVIE_FINISHED)
	MSG_FIELD(0, int, nMovieList, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_DUEL_INVITE)
	MSG_FIELD(0, PGUID, guidOpponent, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_DUEL_INVITE_ACCEPT)
	MSG_FIELD(0, UNITID, idOpponent, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_DUEL_INVITE_DECLINE)
	MSG_FIELD(0, UNITID, idOpponent, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_DUEL_INVITE_FAILED)
	MSG_FIELD(0, UNITID, idOpponent, INVALID_ID)
	MSG_FIELD(1, WORD, wFailReasonInviter, 0)
	MSG_FIELD(2, WORD, wFailReasonInvitee, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_DUEL_AUTOMATED_SEEK)
END_MSG_STRUCT

// only sent server to self, game mailbox.
// Tell game server to create a duel game and send it to battle server.
DEF_MSG_STRUCT(MSG_APPCMD_DUEL_AUTOMATED_HOST)
	MSG_WCHAR(0,szCharName, MAX_CHARACTER_NAME)
	MSG_FIELD(1,PGUID,		guidCharacter,	INVALID_GUID)
	MSG_FIELD(2,DWORD,		idBattle,		INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_DUEL_AUTOMATED_GUEST)
	MSG_WCHAR(0,szCharName,		MAX_CHARACTER_NAME)
	MSG_FIELD(1,PGUID,			guidCharacter, INVALID_GUID)
	MSG_WCHAR(2, szCharHost,	MAX_CHARACTER_NAME)
	MSG_FIELD(3, PGUID,			guidHost,	INVALID_GUID)
	MSG_FIELD(4, GAMEID,		idGameHost,	INVALID_GAMEID)
	MSG_STRUC(5, WARP_SPEC,		tWarpSpec)
	MSG_FIELD(6, DWORD,			idBattle, INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_DUEL_NEW_RATING)
	MSG_WCHAR(0,szCharName, MAX_CHARACTER_NAME)
	MSG_FIELD(1,PGUID,		guidCharacter,	INVALID_GUID)
	MSG_FIELD(2,DWORD,		idBattle,		INVALID_ID)
	MSG_FIELD(3,float,		fNewPvpLevelDelta, 0.0f)
END_MSG_STRUCT

// only sent server to self, game mailbox.
DEF_MSG_STRUCT(MSG_APPCMD_PLAYER_GUILD_ACTION_RESULT)
	MSG_WCHAR(0, wszPlayerName,				MAX_CHARACTER_NAME)
	MSG_FIELD(1, PGUID,						ullPlayerGuid,			(ULONGLONG)-1)
	MSG_FIELD(2, ULONGLONG,					ullPlayerAccountId,		(ULONGLONG)-1)
	MSG_FIELD(3, WORD,						wPlayerRequest,			(WORD)-1)
	MSG_FIELD(4, WORD,						wActionResult,			(WORD)-1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_PLAYER_GUILD_ACTION_RESULT_GAME)
	MSG_WCHAR(0, wszPlayerName,				MAX_CHARACTER_NAME)
	MSG_FIELD(1, PGUID,						ullPlayerGuid,			(ULONGLONG)-1)
	MSG_FIELD(2, ULONGLONG,					ullPlayerAccountId,		(ULONGLONG)-1)
	MSG_FIELD(3, WORD,						wPlayerRequest,			(WORD)-1)
	MSG_FIELD(4, WORD,						wActionResult,			(WORD)-1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_RECOVER_LEVEL_CHAT_CHANNELS)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_RESPEC)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_RESPECCRAFTING)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_GUILD_CREATE)
	MSG_WCHAR(0, wszGuildName,				MAX_CHAT_CNL_NAME)
	MSG_FIELD(1, UNITID,					idGuildHerald,			INVALID_ID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_GUILD_INVITE)
	MSG_WCHAR(0, wszPlayerToInviteName,		MAX_CHARACTER_NAME)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_GUILD_DECLINE_INVITE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_GUILD_ACCEPT_INVITE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_GUILD_LEAVE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_PLAYER_GUILD_DATA_APP)
	MSG_WCHAR(0, wszPlayerName,				MAX_CHARACTER_NAME)
	MSG_FIELD(1, PGUID,						ullPlayerGuid,			INVALID_GUID)
	MSG_FIELD(2, ULONGLONG,					ullPlayerAccountId,		INVALID_UNIQUE_ACCOUNT_ID)
	MSG_WCHAR(3, wszGuildName,				MAX_CHAT_CNL_NAME)
	MSG_FIELD(4, BYTE,						eGuildRank,				0)
	MSG_WCHAR(5, wszRankName,				MAX_CHARACTER_NAME)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_PLAYER_GUILD_DATA_GAME)
	MSG_WCHAR(0, wszPlayerName,				MAX_CHARACTER_NAME)
	MSG_FIELD(1, PGUID,						ullPlayerGuid,			INVALID_GUID)
	MSG_FIELD(2, ULONGLONG,					ullPlayerAccountId,		INVALID_UNIQUE_ACCOUNT_ID)
	MSG_WCHAR(3, wszGuildName,				MAX_CHAT_CNL_NAME)
	MSG_FIELD(4, BYTE,						eGuildRank,				0)
	MSG_WCHAR(5, wszRankName,				MAX_CHARACTER_NAME)
	END_MSG_STRUCT	

DEF_MSG_STRUCT(MSG_CCMD_GUILD_REMOVE)
	MSG_WCHAR(0, wszPlayerToRemoveName,		MAX_CHARACTER_NAME)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_GUILD_CHANGE_RANK)
	MSG_WCHAR(0, wszTargetName,				MAX_CHARACTER_NAME)
	MSG_FIELD(1, BYTE,						eTargetRank,			0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_GUILD_CHANGE_RANK_NAME)
	MSG_FIELD(0, BYTE,						eRank,					0)
	MSG_WCHAR(1, wszRankName,				MAX_CHARACTER_NAME)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_GUILD_CHANGE_ACTION_PERMISSIONS)
	MSG_FIELD(0, BYTE,						eGuildActionType,		0)
	MSG_FIELD(1, BYTE,						eMinimumGuildRank,		0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_PARTY_MEMBER_INFO_APP)
	MSG_FIELD(0, GAMEID,					IdGame,					INVALID_ID)
	MSG_FIELD(1, ULONGLONG,					ullPlayerAccountId,		INVALID_UNIQUE_ACCOUNT_ID)
	MSG_FIELD(2, PGUID,						IdPlayerCharacterGuid,	INVALID_GUID)
	MSG_FIELD(3, CHANNELID,					IdNewPartyChannel,		INVALID_CHANNELID)
	MSG_FIELD(4, BYTE,						LeaveReason,			((BYTE)-1))
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_PARTY_MEMBER_INFO_GAME)
	MSG_FIELD(0, GAMEID,					IdGame,					INVALID_ID)
	MSG_FIELD(1, ULONGLONG,					ullPlayerAccountId,		INVALID_UNIQUE_ACCOUNT_ID)
	MSG_FIELD(2, PGUID,						IdPlayerCharacterGuid,	INVALID_GUID)
	MSG_FIELD(3, CHANNELID,					IdNewPartyChannel,		INVALID_CHANNELID)
	MSG_FIELD(4, BYTE,						LeaveReason,			((BYTE)-1))
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ACHIEVEMENT_SELECTED)	
	MSG_FIELD(0, int, nAchievementID, INVALID_ID)
	MSG_FIELD(1, int, nAchievementSlot, -1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_STUCK)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_CUBE_TRY_CREATE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_ITEM_SPLIT_STACK)
	MSG_FIELD(0, UNITID, idItem, INVALID_ID)
	MSG_FIELD(1, int, nStackPrevious, 0)		// KCK: Added for security purposes to prevent duping
	MSG_FIELD(2, int, nNewStackSize, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_PLAYED)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_DONATE_MONEY)
	MSG_FIELD(0, int, nMoney, 0)
	MSG_FIELD(1, int, nRealWorldMoney, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_DONATION_EVENT)
	MSG_FIELD(0, int, nDonationEventType, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_WARP_TO_PLAYER_RESULT)
	MSG_FIELD(0, ULONGLONG, ullRequestCode, 0)
	MSG_FIELD(1, BYTE,						bFoundTargetMember,		FALSE)
	MSG_WCHAR(2, TargetMemberName,			MAX_CHARACTER_NAME)
	MSG_FIELD(3, PGUID,						TargetMemberGuid,		INVALID_CLUSTERGUID)
	MSG_STRUC(4, COMMON_GAMESVR_DATA,		TargetMemberGameData)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_SELECT_PLAYER_TITLE)
	MSG_FIELD(0, int, nTitleString, 0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_CREATE_PVP_GAME)
	MSG_FIELD(0, int, ePvPGameType, -1)	//Currently only CTF is supported.
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_JOIN_PVP_GAME)
	MSG_FIELD(0, GAMEID, idGameToWarpTo, INVALID_ID)
END_MSG_STRUCT

//----------------------------------------------------------------------------

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_SEND_START)
	MSG_WCHAR(0, wszEmailSubject,			MAX_EMAIL_SUBJECT)
	MSG_WCHAR(1, wszEmailBody,				MAX_EMAIL_BODY)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_ADD_RECIPIENT_BY_CHARACTER_NAME)
	MSG_WCHAR(0, wszTargetCharacterName,	MAX_CHARACTER_NAME)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_ADD_GUILD_MEMBERS_AS_RECIPIENTS)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_SET_ATTACHMENTS)
	MSG_FIELD(0, PGUID,						idAttachedItemId,			INVALID_CLUSTERGUID)
	MSG_FIELD(1, DWORD,						dwAttachedMoney,			0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_SEND_COMMIT)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_CREATION_RESULT)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			(ULONGLONG)-1)
	MSG_FIELD(1, DWORD,						dwfEmailCreationResult,		(DWORD)-1)
	MSG_FIELD(2, BYTE,						eEmailSpecSource,			0)			// see EMAIL_SPEC_SOURCE
	MSG_FIELD(3, DWORD,						dwUserContext,				(DWORD)-1)  // user defined context
	MSG_WCHAR(4, wszIgnoringTarget,			MAX_CHARACTER_NAME)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_CREATION_RESULT_UTIL_GAME)
	MSG_STRUC(0, MSG_APPCMD_EMAIL_CREATION_RESULT, tResult)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_ITEM_TRANSFER_RESULT)
	MSG_FIELD(0, ULONGLONG,					ullRequestCode,				(ULONGLONG)-1)
	MSG_FIELD(1, ULONGLONG,					idEmailMessageId,			(ULONGLONG)-1)
	MSG_FIELD(2, BYTE,						bTransferSuccess,			FALSE)
	MSG_FIELD(3, PGUID,						idItemGuid,					INVALID_GUID)
	MSG_FIELD(4, BYTE,						eEmailSpecSource,			0)			// see EMAIL_SPEC_SOURCE	
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_MONEY_DEDUCTION_RESULT)
	MSG_FIELD(0, BYTE,						bTransferSuccess,			FALSE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_DELIVERY_RESULT)
	MSG_FIELD(0, BYTE,						bEmailDeliveryResult,		FALSE)
	MSG_FIELD(1, BYTE,						eEmailSpecSource,			FALSE)
	MSG_FIELD(2, ULONGLONG,					idEmailMessageId,			(ULONGLONG)-1)	
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_DELIVERY_RESULT_UTIL_GAME)
	MSG_STRUC(0, MSG_APPCMD_EMAIL_DELIVERY_RESULT,		tResult)
END_MSG_STRUCT

//	NOTE: CANNOT be changed once the email system is live and there are emails with serialized versions of these in production,
//			instead make another version and handle multiple versions in the s_playerEmail.cpp code that looks at these.
DEF_MSG_STRUCT(MSG_APPCMD_SERIALIZED_EMAIL_SEND_CONTEXT_V1)
	MSG_FIELD(0, DWORD,						dwMailFee,					0)
	MSG_STRUC(1, GAME_VARIANT,				tSenderGameVariant)
	MSG_FIELD(2, BYTE,						bAttachedItemIsSubscriberOnly,	FALSE)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_NOTIFICATION)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			(ULONGLONG)-1)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_METADATA)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			INVALID_CLUSTERGUID)
	MSG_FIELD(1, ULONGLONG,					idSenderCharacterId,		INVALID_CLUSTERGUID)
	MSG_WCHAR(2, wszSenderCharacterName,	MAX_CHARACTER_NAME)
	MSG_FIELD(3, BYTE,						eMessageStatus,				(BYTE)-1)
	MSG_FIELD(4, BYTE,						eMessageType,				(BYTE)-1)
	MSG_BLOBW(5, MessageContextData,		MAX_EMAIL_CONTEXT_DATA)
	MSG_FIELD(6, ULONGLONG,					timeSentUTC,				0)
	MSG_FIELD(7, ULONGLONG,					timeOfManditoryDeletionUTC,	0)
	MSG_FIELD(8, BYTE,						bIsMarkedRead,				TRUE)
	MSG_FIELD(9, PGUID,						idAttachedItemId,			INVALID_CLUSTERGUID)
	MSG_FIELD(10,DWORD,						dwAttachedMoney,			0)
	MSG_FIELD(11,PGUID,						idAttachedMoneyUnitId,		INVALID_CLUSTERGUID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_ACCEPTED_EMAIL_DATA)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			INVALID_CLUSTERGUID)
	MSG_WCHAR(1, wszEmailSubject,			MAX_EMAIL_SUBJECT)
	MSG_WCHAR(2, wszEmailBody,				MAX_EMAIL_BODY)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_UPDATE)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			INVALID_CLUSTERGUID)
	MSG_FIELD(1, ULONGLONG,					timeOfManditoryDeletionUTC,	0)
	MSG_FIELD(2, BYTE,						bIsMarkedRead,				TRUE)
	MSG_FIELD(3, PGUID,						idAttachedItemId,			INVALID_CLUSTERGUID)
	MSG_FIELD(4, DWORD,						dwAttachedMoney,			0)
	MSG_FIELD(5, PGUID,						idAttachedMoneyUnitId,		INVALID_CLUSTERGUID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_RESTORE_OUTBOX_ITEM_LOC)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_MARK_MESSAGE_READ)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			INVALID_CLUSTERGUID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_REMOVE_ATTACHED_MONEY)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			INVALID_CLUSTERGUID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_CLEAR_ATTACHED_ITEM)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			INVALID_CLUSTERGUID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_EMAIL_DELETE_MESSAGE)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			INVALID_CLUSTERGUID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_ATTACHED_MONEY_INFO)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			INVALID_CLUSTERGUID)
	MSG_FIELD(1, DWORD,						dwMoneyAmmount,				0)
	MSG_FIELD(2, PGUID,						idMoneyUnitId,				INVALID_GUID)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_EMAIL_MONEY_REMOVAL_RESULT)
	MSG_FIELD(0, ULONGLONG,					idEmailMessageId,			INVALID_CLUSTERGUID)
	MSG_FIELD(1, DWORD,						dwMoneyAmmount,				0)
	MSG_FIELD(2, BYTE,						bSuccess,					FALSE)
END_MSG_STRUCT

//----------------------------------------------------------------------------

#define MAX_CLIENT_TO_GAME_HYPERTEXT_DATA	512

DEF_MSG_STRUCT(MSG_CCMD_ITEM_MESSAGE)
	MSG_FIELD(0, BYTE,						eItemChatType,				0)
	MSG_WCHAR(1, wszTargetName,				MAX_CHARACTER_NAME)
	MSG_FIELD(2, CHANNELID,					targetChannelId,			INVALID_CHANNELID)
	MSG_WCHAR(3, wszMessageText,			(MAX_CHAT_MESSAGE/sizeof(WCHAR)))
	MSG_BLOBW(4, HypertextData,				MAX_CLIENT_TO_GAME_HYPERTEXT_DATA)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_GENERATE_RANDOM_ITEM)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_GENERATE_RANDOM_ITEM_GETBLOB)
	MSG_FIELD(0, PGUID,						ItemGUID,					INVALID_GUID	)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_UTIL_GAME_ADD_AH_CLIENT)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_AH_ERROR)
	MSG_FIELD(0, PGUID,						PlayerGUID,					INVALID_GUID	)
	MSG_FIELD(1, DWORD,						ErrorCode,					0				)
	MSG_FIELD(2, PGUID,						ItemGUID,					INVALID_GUID	)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_AH_PLAYER_ITEM_SALE_LIST)
	MSG_FIELD(0, PGUID,						PlayerGUID,					INVALID_GUID					)
	MSG_FIELD(1, DWORD,						ItemCount,					0								)
	MSG_ARRAY(2, PGUID,						ItemGUIDs,					AUCTION_MAX_ITEM_SALE_COUNT		)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_AH_SEARCH_RESULT)
	MSG_FIELD(0, PGUID,						PlayerGUID,					INVALID_GUID)
	MSG_FIELD(1, DWORD,						ResultSize,					0)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_AH_SEARCH_RESULT_NEXT)
	MSG_FIELD(0, PGUID,						PlayerGUID,					INVALID_GUID				)
	MSG_FIELD(1, DWORD,						ResultSize,					0							)
	MSG_FIELD(2, DWORD,						ResultCurIndex,				0							)
	MSG_FIELD(3, DWORD,						ResultCurCount,				0							)
	MSG_ARRAY(4, PGUID,						ItemGUIDs,					AUCTION_SEARCH_MAX_RESULT	)
	MSG_FIELD(5, BYTE,						ResultOwnItem,				FALSE						)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_AH_SEARCH_RESULT_ITEM_INFO)
	MSG_FIELD(0, PGUID,						PlayerGUID,					INVALID_GUID				)
	MSG_FIELD(1, PGUID,						ItemGUID,					INVALID_GUID				)
	MSG_FIELD(2, DWORD,						ItemPrice,					0							)
	MSG_WCHAR(3,							szSellerName,				MAX_CHARACTER_NAME			)	
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_AH_SEARCH_RESULT_ITEM_BLOB)
	MSG_FIELD(0, PGUID,						PlayerGUID,					INVALID_GUID					)
	MSG_FIELD(1, PGUID,						ItemGUID,					INVALID_GUID					)
	MSG_BLOBW(2,							ItemBlob,					DEFAULT_MAX_ITEM_BLOB_MSG_SIZE	)
END_MSG_STRUCT


DEF_MSG_STRUCT(MSG_CCMD_AH_RETRIEVE_SALE_ITEMS)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AH_SEARCH_ITEMS)
	MSG_FIELD(0, DWORD,						ItemType,					0	)
	MSG_FIELD(1, DWORD,						ItemClass,					(DWORD)-1	)
	MSG_FIELD(2, DWORD,						ItemMinPrice,				0	)
	MSG_FIELD(3, DWORD,						ItemMaxPrice,				0	)
	MSG_FIELD(4, DWORD,						ItemMinLevel,				0	)
	MSG_FIELD(5, DWORD,						ItemMaxLevel,				0	)
	MSG_FIELD(6, DWORD,						ItemMinQuality,				0	)
	MSG_FIELD(7, DWORD,						ItemSortMethod,				0	)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AH_SEARCH_ITEMS_NEXT)
	MSG_FIELD(0, DWORD,						SearchIndex,				0	)
	MSG_FIELD(1, DWORD,						SearchSize,					0	)
	MSG_FIELD(2, BYTE,						SearchOwnItem,				FALSE	)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AH_REQUEST_ITEM_INFO)
	MSG_FIELD(0, PGUID,						ItemGUID,					0	)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AH_REQUEST_ITEM_BLOB)
	MSG_FIELD(0, PGUID,						ItemGUID,					0	)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AH_SELL_ITEM)
	MSG_FIELD(0, PGUID,						ItemGUID,					INVALID_GUID	)
	MSG_FIELD(1, DWORD,						ItemPrice,					0	)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_UTIL_GAME_CHECK_ITEM_EMAIL)
	MSG_FIELD(0, PGUID,						EmailGUID,					INVALID_GUID	)	
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AH_SELL_RANDOM_ITEM)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AH_GET_INFO)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AH_WITHDRAW_ITEM)
	MSG_FIELD(0, PGUID,						ItemGUID,					INVALID_GUID	)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_CCMD_AH_BUY_ITEM)
	MSG_FIELD(0, PGUID,						ItemGUID,					INVALID_GUID	)
	MSG_FIELD(1, DWORD,						ItemPrice,					0	)
END_MSG_STRUCT

DEF_MSG_STRUCT(MSG_APPCMD_AH_OK_TO_BUY)
	MSG_FIELD(0, PGUID,						ItemGUID,					INVALID_GUID	)
	MSG_FIELD(1, DWORD,						ItemPrice,					0	)
END_MSG_STRUCT

#define MSG_APPCMD_UTIL_GAME_EMAIL_METADATA					MSG_APPCMD_EMAIL_METADATA
#define MSG_APPCMD_UTIL_GAME_EMAIL_DATA						MSG_APPCMD_ACCEPTED_EMAIL_DATA
#define MSG_APPCMD_UTIL_GAME_EMAIL_ITEM_TRANSFER_RESULT		MSG_APPCMD_EMAIL_ITEM_TRANSFER_RESULT

//----------------------------------------------------------------------------
// FUNCTIONS - General Messages, Client to Server
//----------------------------------------------------------------------------
#if !ISVERSION(SERVER_VERSION)

BOOL c_SendMessage(
	NET_CMD command,
	MSG_STRUCT * msg);

#endif //!ISVERSION(SERVER_VERSION)


//----------------------------------------------------------------------------
// FUNCTIONS - Specific Messages, Client to Server
//----------------------------------------------------------------------------

struct NET_COMMAND_TABLE * c_NetGetCommandTable(
	void);

void c_NetCommandTableFree(
	void);

#if !ISVERSION(SERVER_VERSION)

void c_SendNewPlayer(
	BOOL bNewPlayer,
	const WCHAR * szName,
	int nPlayerSlot,
	unsigned int nClass,
	struct WARDROBE_BODY * pWardrobeBody,
	struct APPEARANCE_SHAPE * pAppearanceShape,
	DWORD dwGemActivation,
	DWORD dwNewPlayerFlags,				// see NEW_PLAYER_FLAGS
	int nDifficulty);

void c_SendRemovePlayer(
	void);

void c_SendSkillStart( 
	const VECTOR & vPosition,
	WORD wSkill, 
	UNITID idTarget,
	const VECTOR & vTarget);

void c_SendSkillChangeWeaponTarget(
	WORD wSkill,
	UNITID idWeapon,
	UNITID idTarget,
	int nTargetIndex );

void c_SendSkillStop(
	int nSkill );

void c_SendSkillShiftEnable(
	int nSkill,
	BOOL bEnable );

BOOL c_SendCheat(
	const WCHAR* txt);

void c_SendSkillSaveAssign( 
	WORD wSkill, 
	BYTE bySkillAssign );

void c_SendDebugUnitId( 
	UNITID idDebugUnit );

void c_SendPartyAdvertise(
	const WCHAR * wszPartyDesc,
	int nMaxPlayers,
	int nMinLevel,
	int nMaxLevel);

void c_SendPlayerAdvertiseLFG(
	const WCHAR * wszPlayerDesc,
	int nMaxPlayers,
	int nMinLevel,
	int nMaxLevel);

void c_SendQuestAbandon(
	int	nQuestID );

void c_SendPlayerSelectAchievment( int nAchievementID,
								   int nAchievementSlot );

#endif //  _C_MESSAGE_H_
		 
#endif //!ISVERSION(SERVER_VERSION)

//----------------------------------------------------------------------------
// MESSAGE ENUMERATIONS  (Client to Server messages)
//----------------------------------------------------------------------------
#ifndef _C_MESSAGE_ENUM_H_
#define _C_MESSAGE_ENUM_H_

NET_MSG_TABLE_BEGIN
	// command												sendlog	recvlog
	NET_MSG_TABLE_DEF(CCMD_PLAYERNEW,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_NEW_ITEM_COLLECTION,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_PLAYER_IN_CHAT_SERVER,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_CHAT_CHANNEL_CREATED,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_AUTO_PARTY_CREATED,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_OPEN_PLAYER_FILE_START,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_OPEN_PLAYER_FILE_CHUNK,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_DATABASE_PLAYER_FILE_START,	TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(APPCMD_DATABASE_PLAYER_FILE_CHUNK,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_SWITCHINSTANCE,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_UNRESERVEGAME,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_SWITCHSERVER,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_PLAYER_GUILD_ACTION_RESULT,	FALSE,	FALSE)
	NET_MSG_TABLE_DEF(APPCMD_PLAYER_GUILD_ACTION_RESULT_GAME,FALSE, FALSE)
	NET_MSG_TABLE_DEF(APPCMD_RECOVER_LEVEL_CHAT_CHANNELS,	FALSE,	FALSE)
	NET_MSG_TABLE_DEF(APPCMD_PLAYER_GUILD_DATA_APP,			FALSE,	FALSE)
	NET_MSG_TABLE_DEF(APPCMD_PLAYER_GUILD_DATA_GAME,		FALSE,	FALSE)
	NET_MSG_TABLE_DEF(APPCMD_PARTY_MEMBER_INFO_APP,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_PARTY_MEMBER_INFO_GAME,		TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_TAKE_OVER_CLIENT,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_PLAYERGAG,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_UTILITY_GAME_REQUEST,			TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(APPCMD_IN_GAME_DB_CALLBACK,			TRUE,	TRUE)		
	NET_MSG_TABLE_DEF(APPCMD_DELETE_ITEM,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_PLAYERREMOVE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REQMOVE,							FALSE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_UNITMOVEXYZ,						FALSE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_UNITSETFACEDIRECTION,			FALSE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_UNIT_PATH_POSITION_UPDATE,		FALSE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_UNITWARP,						FALSE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_PLAYER_FELL_OUT_OF_WORLD,		FALSE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_SKILLSTART,						TRUE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_SKILLSTARTXYZ,					TRUE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_SKILLSTARTID,					TRUE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_SKILLSTARTXYZID,					TRUE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_SKILLCHANGETARGETID,				TRUE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_SKILLSTOP,						TRUE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_SKILLSHIFT_ENABLE,				TRUE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_PLAYER_RESPAWN,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_PICKUP,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_INVEQUIP,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_INVDROP,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_INVPUT,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_INVSWAP,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ITEMINVPUT,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_INVUSE,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_INVUSEON,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_INVSHOWINCHAT,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_HOTKEY,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ADD_WEAPONCONFIG,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_SELECT_WEAPONCONFIG,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_CHEAT,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_INTERACT,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_QUEST_INTERACT_DIALOG,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REQUEST_INTERACT_CHOICES,		TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_SKILLSELECT,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_SKILLDESELECT,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_SKILLPICKMELEESKILL,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ALLOCSTAT,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ABORTQUEST,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_EXIT_GAME,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_DOUBLEEQUIP,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_SKILLSAVEASSIGN,					FALSE,  TRUE)
	NET_MSG_TABLE_DEF(CCMD_SETDEBUGUNIT,					FALSE,  TRUE)
	NET_MSG_TABLE_DEF(CCMD_LEVELLOADED,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ITEMSELL,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ITEMBUY,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TRY_IDENTIFY,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ITEM_PICK_ITEM,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_CANCEL_IDENTIFY,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TRY_DISMANTLE,					TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_PVP_SIGN_UP_ACCEPT,				TRUE,	TRUE)
	
	// vvv Tugboat-specific	
	NET_MSG_TABLE_DEF(CCMD_RETURN_TO_LOWEST_LEVEL,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_BUY_HIRELING,					TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_ACHIEVEMENT_SELECTED,			TRUE,	TRUE)
	// ^^^ Tugboat-specific

	NET_MSG_TABLE_DEF(CCMD_LIST_GAME_INSTANCES,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_WARP_TO_GAME_INSTANCE,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REQUEST_AREA_WARP,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_QUEST_TRY_ACCEPT,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_RECIPE_CLEAR_PLAYER_MODIFICATIONS, TRUE, TRUE )
	NET_MSG_TABLE_DEF(CCMD_RECIPE_SET_PLAYER_MODIFICATIONS,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_RECIPE_TRY_CREATE,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_RECIPE_TRY_BUY,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_RECIPE_CLOSE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_RECIPE_SELECT,					TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_TASK_TRY_ACCEPT,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TASK_TRY_ABANDON,				TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_TASK_TRY_ACCEPT_REWARD,			TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_QUEST_TRY_ABANDON,				TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_TALK_DONE,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TUTORIAL_UPDATE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TRY_RETURN_TO_HEADSTONE,			TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_REQ_SKILL_UP,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REQ_TIER_UP,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REQ_CRAFTING_TIER_UP,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REQ_SKILL_UNLEARN,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REQ_WEAPONSET_SWAP,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AGGRESSION_TOGGLE,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_CLIENT_QUEST_STATE_CHANGE,		TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_OPERATE_WAYPOINT,				FALSE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_OPERATE_ANCHORSTONE,				FALSE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_OPERATE_RUNEGATE,				FALSE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TRADE_CANCEL,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TRADE_STATUS,					TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_TRADE_REQUEST_NEW,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TRADE_REQUEST_NEW_CANCEL,		TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_TRADE_REQUEST_ACCEPT,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TRADE_REQUEST_REJECT,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TRADE_MODIFY_MONEY,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_INSPECT_PLAYER,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_WARP_TO_PLAYER,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_SET_PLAYER_OPTIONS,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REWARD_TAKE_ALL,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REWARD_CANCEL,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_JUMP_BEGIN,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_JUMP_END,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ENTER_TOWN_PORTAL,				TRUE,	TRUE)		
	NET_MSG_TABLE_DEF(CCMD_SELECT_RETURN_DEST,				TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_PARTY_ADVERTISE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_PARTY_UNADVERTISE,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_TOGGLE_AUTO_PARTY,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_PVP_TOGGLE,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_PING,							TRUE,	FALSE)
	NET_MSG_TABLE_DEF(CCMD_PICK_COLORSET,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_BOT_CHEAT,						TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_PARTY_MEMBER_TRY_WARP_TO,		TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_PARTY_JOIN_ATTEMPT,				TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_PARTY_ACCEPT_INVITE,				TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_STASH_CLOSE,						TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_TRY_ITEM_UPGRADE,				TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_TRY_ITEM_AUGMENT,				TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_TRY_ITEM_UNMOD,					TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_ITEM_UPGRADE_CLOSE,				TRUE,	TRUE)		
	NET_MSG_TABLE_DEF(CCMD_EMOTE,							TRUE,	TRUE)		
	NET_MSG_TABLE_DEF(CCMD_WHO,								TRUE,	TRUE)	
	NET_MSG_TABLE_DEF(CCMD_KILLPET,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_JOIN_INSTANCING_CHANNEL,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_QUEST_TRACK,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AUTO_TRACK_QUESTS,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_UI_RELOAD,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REMOVE_FROM_WEAPONCONFIG,		TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_REQUEST_REAL_MONEY_TXN,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ACCOUNT_STATUS_UPDATE,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ACCOUNT_BALANCE_UPDATE,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_QUEST_ABANDON,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_MOVIE_FINISHED,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_DUEL_INVITE,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_DUEL_INVITE_ACCEPT,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_DUEL_INVITE_DECLINE,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_DUEL_INVITE_FAILED,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_GUILD_CREATE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_GUILD_INVITE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_GUILD_DECLINE_INVITE,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_GUILD_ACCEPT_INVITE,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_GUILD_LEAVE,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_GUILD_REMOVE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_GUILD_CHANGE_RANK,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_GUILD_CHANGE_RANK_NAME,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_GUILD_CHANGE_ACTION_PERMISSIONS,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_RESPEC,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_RESPECCRAFTING,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_STUCK,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_CUBE_TRY_CREATE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ITEM_SPLIT_STACK,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_DUEL_AUTOMATED_SEEK,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_DUEL_AUTOMATED_HOST,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_DUEL_AUTOMATED_GUEST,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_DUEL_NEW_RATING,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_WARP_TO_PLAYER_RESULT,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_PLAYED,							TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_SELECT_PLAYER_TITLE,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_DONATE_MONEY,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_DONATION_EVENT,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_SEND_START,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_ADD_RECIPIENT_BY_CHARACTER_NAME,TRUE,TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_ADD_GUILD_MEMBERS_AS_RECIPIENTS,TRUE,TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_SET_ATTACHMENTS,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_SEND_COMMIT,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_CREATION_RESULT,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_CREATION_RESULT_UTIL_GAME,TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_ITEM_TRANSFER_RESULT,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_MONEY_DEDUCTION_RESULT,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_DELIVERY_RESULT,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_DELIVERY_RESULT_UTIL_GAME,TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_NOTIFICATION,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_METADATA,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_ACCEPTED_EMAIL_DATA,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_UPDATE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_RESTORE_OUTBOX_ITEM_LOC,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_MARK_MESSAGE_READ,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_REMOVE_ATTACHED_MONEY,		TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_CLEAR_ATTACHED_ITEM,		TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_EMAIL_DELETE_MESSAGE,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_ATTACHED_MONEY_INFO,		TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_EMAIL_MONEY_REMOVAL_RESULT,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_ITEM_MESSAGE,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_CREATE_PVP_GAME,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_JOIN_PVP_GAME,					TRUE,	TRUE)

	// Auction Server to Client messages
	NET_MSG_TABLE_DEF(APPCMD_AH_ERROR,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_AH_PLAYER_ITEM_SALE_LIST,		TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_AH_SEARCH_RESULT,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_AH_SEARCH_RESULT_NEXT,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_AH_SEARCH_RESULT_ITEM_INFO,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_AH_SEARCH_RESULT_ITEM_BLOB,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_AH_OK_TO_BUY,					TRUE,	TRUE)

	// From GameServer to 'Utility' Gamee Instance
	NET_MSG_TABLE_DEF(APPCMD_GENERATE_RANDOM_ITEM,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_GENERATE_RANDOM_ITEM_GETBLOB,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_UTIL_GAME_ADD_AH_CLIENT,		TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_UTIL_GAME_CHECK_ITEM_EMAIL,	TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_UTIL_GAME_EMAIL_METADATA,		TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_UTIL_GAME_EMAIL_DATA,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(APPCMD_UTIL_GAME_EMAIL_ITEM_TRANSFER_RESULT,	TRUE,	TRUE)

	// Client to Auction Server messages
	NET_MSG_TABLE_DEF(CCMD_AH_GET_INFO,						TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AH_RETRIEVE_SALE_ITEMS,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AH_SEARCH_ITEMS,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AH_SEARCH_ITEMS_NEXT,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AH_REQUEST_ITEM_INFO,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AH_REQUEST_ITEM_BLOB,			TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AH_SELL_ITEM,					TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AH_SELL_RANDOM_ITEM,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AH_WITHDRAW_ITEM,				TRUE,	TRUE)
	NET_MSG_TABLE_DEF(CCMD_AH_BUY_ITEM,						TRUE,	TRUE)
	
	NET_MSG_TABLE_END(CCMD_LAST)


#endif // _C_MESSAGE_ENUM_H_
