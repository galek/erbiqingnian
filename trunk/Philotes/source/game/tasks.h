//----------------------------------------------------------------------------
// FILE: tasks.h
//
// (C)Copyright 2005, Flagship Studios. All rights reserved.
//----------------------------------------------------------------------------
#ifndef __TASKS_H_
#define __TASKS_H_

//----------------------------------------------------------------------------
// INCLUDES
//----------------------------------------------------------------------------
#ifndef __FACTION_H_
#include "faction.h"
#endif

#ifndef _SCRIPT_TYPES_H_
#include "script_types.h"
#endif

#include "../data_common/excel/task_status_hdr.h"	// auto generated by excel

//----------------------------------------------------------------------------
// FORWARD DECLARATIONS
//----------------------------------------------------------------------------
struct GAME;
struct DATA_TABLE;
struct UNIT;
struct MSG_SCMD_AVAILABLE_TASKS;
struct TASK_DEFINITION;
struct TASK;
enum UNIT_INTERACT;
struct LEVEL;
struct ROOM;
struct TASK_TEMPLATE;

//----------------------------------------------------------------------------
// TYPES
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
enum TASK_CONSTANTS
{
	MAX_TASKS = 128,					// arbitrary, increase as needed
	MAX_TASK_FUNCTION_NAME_LEN = 128,	// max function name length
	//This should be 3 for Tugboat	
	MAX_ACTIVE_TASKS_PER_PLAYER_HG = 1,		//this value reset the MAX_ACTIVE_TASKS_PER_PLAYER if Hellgate
	MAX_ACTIVE_TASKS_PER_PLAYER_TB = 3,		//this value reset the MAX_ACTIVE_TASKS_PER_PLAYER if Tugboat
	MAX_ACTIVE_TASKS = 3,
};

//----------------------------------------------------------------------------
enum TASK_MESSAGE
{
	TM_INVALID = -1,
	
	TM_MONSTER_KILL,			// monster has been killed
	TM_LEVEL_ACTIVATED,			// level has been activated
	TM_ROOM_ACTIVATED,			// room has been activated
	TM_INVENTORY_ADD,			// object added to player inventory
	TM_INVENTORY_REMOVE,		// object removed from player inventory
	TM_ROOM_ENTERED,			// player has entered a room
	
	TM_NUM_MESSAGES				// keep this last
};

//----------------------------------------------------------------------------
struct TASK_MESSAGE_MONSTER_KILL
{
	UNITID idKiller;			// may be INVALID_ID
	UNITID idVictim;			// cannot be NULL
};

//----------------------------------------------------------------------------
struct TASK_MESSAGE_LEVEL_ACTIVATE
{
	LEVEL* pLevel;
};

//----------------------------------------------------------------------------
struct TASK_MESSAGE_ROOM_ACTIVATE
{
	ROOM* pRoom;
};

//----------------------------------------------------------------------------
struct TASK_MESSAGE_ROOM_ENTER
{
	UNIT * pPlayer;
	ROOM* pRoom;
};

//----------------------------------------------------------------------------
struct TASK_MESSAGE_INVENTORY_ADD
{
	UNIT* pPlayer;
	UNIT* pAdded;
};

//----------------------------------------------------------------------------
struct TASK_MESSAGE_INVENTORY_REMOVE
{
	UNIT* pPlayer;
	UNIT* pRemoved;
};

//----------------------------------------------------------------------------
typedef BOOL (* PFN_CREATE_FUNCTION)( GAME *pGame, TASK *pNewTask, DWORD dwCreateFlags );

//----------------------------------------------------------------------------
struct TASK_DEFINITION
{
	char szName[DEFAULT_INDEX_SIZE];	// task name
	WORD wCode;							// code
	int nRarity;						// how often it shows up
	BOOL bHostileAreasOnly;				// task can only be in hostile areas
	BOOL bAccessibleAreaOnly;			// task can only be in accessible areas
	PCODE codeTimeLimit;				// task time limit
	PCODE codeExterminateCount;			// how many things to exterminate
	PCODE codeTriggerPercent;			// what percent of objects do we have to trigger?
	int nObjectClass;					// which object to spawn
	BOOL bCanSave;						// task can be saved and restored
	BOOL bMarkOnLevelCompleted;			// when complete, this task will mark in the task_on_level_completed stat with the task and the relavant level as params
	BOOL bDoNotOfferSimilarTask;		// do not offer similar tasks that the player has already done
	int nNameStringKey;					// key for name of task
	int nDescriptionDialog;				// key for task description
	int nCompleteDialog;				// key for task description
	int nIncompleteDialog;				// key for task description
	int nNumRewardTakes;				// a player can choose this many items from the reward (or REWARD_TAKE_ALL)
	int nTreasureClassReward;			// treasure class for rewards
	int nTreasureClassCollect;			// some collect style tasks use this to decide what to collect
	BOOL bCollectModdedToRewards;		// collected items are added to reward items
	int nMinSlotsOnReward;				// minimum number of slots on reward items
	BOOL bFillAllRewardSlots;			// fill all reward slots with mods
	int nFilledSlotsOnForgeReward;		// slots that will be filled for forge reward tasks
	BOOL bImplemented;					// task has been implemted (debugging only)
	char szCreateFunction[ MAX_TASK_FUNCTION_NAME_LEN ];		// create function name
	SAFE_FUNC_PTR(PFN_CREATE_FUNCTION, pfnOnCreate);	// create function pointer
};


//----------------------------------------------------------------------------
struct TASK_STATUS_DEFINITION
{
	char szName[DEFAULT_INDEX_SIZE];
	WORD wCode;						
};

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
BOOL TasksExcelPostProcess( 
	struct EXCEL_TABLE * table);

void TaskExcelParsePermissions(
	GAME *pGame,
	struct DATA_TABLE *pTable,
	const char *pszToken,
	int nTokenBufferLength,
	char *pData,
	int nOffset,
	int nSize,
	int nLine);

const TASK_DEFINITION *TaskDefinitionGet(	
	int nTaskIndex);

const TASK_DEFINITION *TaskDefinitionGetByCode( 	
	WORD wCode);

void TaskTemplateInit(
	TASK_TEMPLATE *pTaskTemplate);

int TaskTemplateGetExterminateGoal( 
	const TASK_TEMPLATE* pTaskTemplate);
	
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
#if !ISVERSION(CLIENT_ONLY_VERSION)
//----------------------------------------------------------------------------

void s_TasksInitForGame(
	GAME *pGame);

void s_TasksCloseForGame(
	GAME *pGame);

#if ISVERSION(CHEATS_ENABLED)
void Cheat_s_TaskKillAllTargets(
	GAME* pGame);
#endif

#if ISVERSION(CHEATS_ENABLED)
void Cheat_s_TaskKillTarget(
	GAME* pGame,
	int nIndex);
#endif

#if ISVERSION(CHEATS_ENABLED)
void Cheat_s_TaskCompleteAll(
	UNIT *pPlayer);
#endif
		
int s_TaskGetAvailableTasks( 
	GAME *pGame,
	UNIT *pPlayer,
	UNIT *pNPC, 
	TASK_TEMPLATE *pAvailableTasks, 
	int nBufferSize);

void s_TaskSendAvailableTasksToClient( 
	GAME *pGame,
	GAMECLIENTID idClient, 
	const TASK_TEMPLATE *pAvailableTasks, 
	const int nAvailableTaskCount,
	UNIT *pTaskGiver);

BOOL s_TaskCanBeSaved(	
	GAME* pGame,
	GAMETASKID idTask);

void s_TaskAccept(
	UNIT *pPlayer,
	GAMETASKID idTask);

void s_TaskAcceptReward(
	UNIT *pPlayer,
	GAMETASKID idTask);
	
void s_TaskAbandon(
	UNIT *pPlayer,
	GAMETASKID idTask);
	
void s_TaskAbanbdonAll(
	UNIT *pPlayer);

void s_TaskCloseAll(
	UNIT *pPlayer);

UNIT_INTERACT s_TaskTalkToGiver(
	UNIT *pPlayer,
	UNIT *pGiver);

void s_TaskWriteToPlayer(
	UNIT* pPlayer);

void s_TaskPlayerJoinGame(
	UNIT* pPlayer);

//----------------------------------------------------------------------------
		
void s_TaskEventMonsterKill(
	UNIT *pKiller,
	UNIT *pVictim);

void s_TaskEventLevelActivated(
	LEVEL* pLevel);

void s_TaskEventRoomActivated(
	ROOM* pRoom);

void s_TaskEventRoomEntered(
	GAME* pGame,
	UNIT * pPlayer,
	ROOM* pRoom);

void s_TaskEventInventoryAdd(
	UNIT* pPlayer,
	UNIT* pAdded);

void s_TaskEventInventoryRemove(
	UNIT* pPlayer,
	UNIT* pRemoved);

void s_TaskRewardItemTaken(
	UNIT *pPlayer,
	UNIT *pItem);

#endif //#if !ISVERSION(CLIENT_ONLY_VERSION)

inline int TaskMaxTasksPerPlayer()
{
	return (AppIsHellgate())?MAX_ACTIVE_TASKS_PER_PLAYER_HG:MAX_ACTIVE_TASKS_PER_PLAYER_TB;
}

//----------------------------------------------------------------------------
// EXTERNALS
//----------------------------------------------------------------------------
extern BOOL gbGenerateTimeDelay;
		
#endif  // end __TASKS_H_
