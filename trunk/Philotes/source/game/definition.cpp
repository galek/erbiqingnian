//----------------------------------------------------------------------------
// definition.cpp
//
// (C)Copyright 2003, Flagship Studios. All rights reserved.
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// INCLUDE
//----------------------------------------------------------------------------
#include "stdafx.h"
#include "prime.h"
#include "definition.h"
#include "definition_priv.h"
#include "markup.h"
#include "interpolationpath.h"

#include "e_particles_priv.h"
#include "c_appearance.h"
#include "e_texture.h"
#include "c_appearance_priv.h"
#include "skills.h"
#include "states.h"
#include "ai_priv.h"
#include "room.h"
#include "room_layout.h"
#include "room_path.h"
#include "gameconfig.h"
#include "c_particles.h"
#include "filepaths.h"
#include "appcommon.h"
#include "e_definition.h"
#include "colorset.h"
#include "unittypes.h"
#include "condition.h"
#include "sound_definition.h"
#include "demolevel.h"

// ************************************************************************************************
//
// --- Specific Definitions --- 
//
// ************************************************************************************************


DEFINITION_START ( CONDITION_DEFINITION, sgtDefinitionLoaderCondition, 'COND', FALSE, FALSE, NULL, 0 )
	DEFINITION_MEMBER_LINK ( CONDITION_DEFINITION, nType, DATATABLE_CONDITION_FUNCTIONS )
	DEFINITION_MEMBER_LINK ( CONDITION_DEFINITION, nState, DATATABLE_STATES )
	DEFINITION_MEMBER_LINK ( CONDITION_DEFINITION, nUnitType, DATATABLE_UNITTYPES )
	DEFINITION_MEMBER_LINK ( CONDITION_DEFINITION, nSkill, DATATABLE_SKILLS )
	DEFINITION_MEMBER_LINK ( CONDITION_DEFINITION, nMonsterClass, DATATABLE_MONSTERS )
	DEFINITION_MEMBER_LINK ( CONDITION_DEFINITION, nObjectClass, DATATABLE_OBJECTS )
	DEFINITION_MEMBER_LINK ( CONDITION_DEFINITION, nStat, DATATABLE_STATS )
	DEFINITION_MEMBER ( CONDITION_DEFINITION, DATA_TYPE_FLOAT, tParams[0].fValue, 0.0f )
	DEFINITION_MEMBER ( CONDITION_DEFINITION, DATA_TYPE_FLOAT, tParams[1].fValue, 0.0f )
	DEFINITION_MEMBER_FLAG_BIT( CONDITION_DEFINITION, dwFlags, CONDITION_BIT_CHECK_OWNER,			NUM_CONDITION_FLAGS )
	DEFINITION_MEMBER_FLAG_BIT( CONDITION_DEFINITION, dwFlags, CONDITION_BIT_CHECK_TARGET,			NUM_CONDITION_FLAGS )
	DEFINITION_MEMBER_FLAG_BIT( CONDITION_DEFINITION, dwFlags, CONDITION_BIT_CHECK_WEAPON,			NUM_CONDITION_FLAGS )
	DEFINITION_MEMBER_FLAG_BIT( CONDITION_DEFINITION, dwFlags, CONDITION_BIT_NOT_DEAD_OR_DYING,		NUM_CONDITION_FLAGS )
	DEFINITION_MEMBER_FLAG_BIT( CONDITION_DEFINITION, dwFlags, CONDITION_BIT_IS_YOUR_PLAYER,		NUM_CONDITION_FLAGS )
	DEFINITION_MEMBER_FLAG_BIT( CONDITION_DEFINITION, dwFlags, CONDITION_BIT_OWNER_IS_YOUR_PLAYER,	NUM_CONDITION_FLAGS )
	DEFINITION_MEMBER_FLAG_BIT( CONDITION_DEFINITION, dwFlags, CONDITION_BIT_CHECK_STATE_SOURCE,	NUM_CONDITION_FLAGS )
DEFINITION_END

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
DEFINITION_START ( GAME_GLOBAL_DEFINITION, sgtDefinitionLoaderGameGlobals, 'GAMD', TRUE, TRUE, NULL, 8 )
	DEFINITION_MEMBER_LINK ( GAME_GLOBAL_DEFINITION, nLevelDefinition, DATATABLE_LEVEL )
	DEFINITION_MEMBER_LINK ( GAME_GLOBAL_DEFINITION, nDRLGOverride, DATATABLE_LEVEL_DRLGS )
	DEFINITION_MEMBER_LINK ( GAME_GLOBAL_DEFINITION, nRoomOverride, DATATABLE_ROOM_INDEX )
DEFINITION_END


class CGameGlobalContainer : public CDefinitionContainer
{
public:
	CGameGlobalContainer() 
	{
		m_pLoader = &sgtDefinitionLoaderGameGlobals;
		m_pszFilePath = FILE_PATH_GLOBAL;
		m_bAlwaysLoadDirect = TRUE;
		InitLoader();
	}
	void Free( 
		void * data,
		int count) 
	{ 
		REF(count);
		FREE_DELETE_ARRAY(NULL, data, GAME_GLOBAL_DEFINITION); 
	}
	void * Alloc( 
		int count) 
	{
		return MALLOC_NEWARRAY(NULL, GAME_GLOBAL_DEFINITION, count); 
	}
};


//-------------------------------------------------------------------------------------------------
DEFINITION_START (PARTICLE_SYSTEM_DEFINITION, sgtDefinitionLoaderParticle, 'PARD', TRUE, FALSE, ParticleSystemPostXMLLoad, 256 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, dwFlags, 0 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, dwFlags2, 0 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, dwFlags3, 0 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_DEFAULT, dwUpdateFlags, 0 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, dwRuntimeFlags, 0 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nLighting, 0 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nLaunchParticleCount, 0 )	
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fMinParticlesPercentDropRate, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszTextureName, glow1.tga )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nGPUShader, -1 )
	DEFINITION_MEMBER_LINK ( PARTICLE_SYSTEM_DEFINITION, nSoundGroup, DATATABLE_SOUNDS )
	DEFINITION_MEMBER_LINK ( PARTICLE_SYSTEM_DEFINITION, nFootstep, DATATABLE_FOOTSTEPS )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nVolume, 1 )	
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fSoundPlayChance, 1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszLightName,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nLightDefId, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszModelDefName,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nModelDefId, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszNextParticleSystem,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nNextParticleSystem, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszFollowParticleSystem,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nFollowParticleSystem, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszRopeEndParticleSystem,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nRopeEndParticleSystem, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszRopePath,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nRopePathId, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszDyingParticleSystem,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nDyingParticleSystem, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fDuration, 10.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fStartDelay, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchScale, 1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleScale, 1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleRotation, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleAcceleration, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleBounce, 0.5f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleTurnSpeed, 0.5f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleWorldAccelerationZ, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleCenterX, 0.5f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleCenterY, 0.5f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleCenterRotation, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleWindInfluence, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleDurationPath,	1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticlesPerSecondPath, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticlesPerMeterPerSecond, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticlesPerMeter, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleBurst, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleDistortionStrength, 0.5f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchOffsetX, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchOffsetY, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchOffsetZ, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchSphereRadius, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchCylinderRadius, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchCylinderHeight, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchVelocityFromSystem, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchSpeedFromSystemForward, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchDirRotation,		0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchDirPitch, 		0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchSpeed,			0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchRotation, 		0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAnimationRate, 			0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAnimationSlidingRateX, 	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAnimationSlidingRateY, 	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchRopeScale, 		0.5f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchRopeAlpha, 		0.5f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeAlpha, 				1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeWorldAccelerationZ, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchRopeSpringiness,	10.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchRopeStiffness,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeWaveAmplitudeUp,	0.1f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeWaveAmplitudeSide,	0.1f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeWaveFrequency,		0.1f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeWaveSpeed,			0.1f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeDampening,			0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeZOffsetOverTime,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleAlpha, 			1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleGlow, 			0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleSpeedBounds, 	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_TRIPLE, tParticleColor, 	0.5f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_TRIPLE, tLaunchRopeColor,	0.5f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleStretchBox, 	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleStretchDiamond, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tLaunchRopeGlow,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeGlow,		1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopeMetersPerTexture,	1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRopePathScale,	1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAttractorOffsetNormal,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAttractorOffsetSideX,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAttractorOffsetSideY,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAttractorWorldOffsetZ,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tParticleAttractorAcceleration,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAttractorDestructionRadius,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAttractorForceRadius,		0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAttractorForceOverRadius,	0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAlphaRef, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tAlphaMin, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nMeshesPerBatchMax, 0 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nDrawOrder, 0 )
	DEFINITION_MEMBER_LINK ( PARTICLE_SYSTEM_DEFINITION, nShaderType, DATATABLE_EFFECTS_SHADERS )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nTextureId, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fCullDistance, 10.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nCullPriority, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fViewSpeed, 10.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fRopeEndSpeed, 1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fTrailKnotDuration, 1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fCircleRadius, 3.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fViewCircleRadius, 3.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fViewHosePressure, 10.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fViewRangePercent, 1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fViewNovaAngle, 0.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nViewParticleSpawnThrottle, 50 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nKnotCount, 5 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nKnotCountMax, 0 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fSegmentSize, 1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tFluidSmokeThickness, 0.380333f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tFluidSmokeAmbientLight, 0.088f )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tGlowMinDensity, 0.4f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tFluidSmokeDensityModifier, 1.0f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tFluidSmokeVelocityModifier, 1.0f )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, vGlowCompensationColor.x, -0.17 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, vGlowCompensationColor.y, -0.8  )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, vGlowCompensationColor.z, -1.0  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nGridWidth, 128 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nGridDepth, 100 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nGridHeight, 128 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nGridBorder, 10 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fVelocityMultiplier, 1.0 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fVelocityClamp, 4.0 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fSizeMultiplier, 1.0 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fVorticityConfinementScale, 0.22 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nGridDensityTextureIndex, 1 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nGridVelocityTextureIndex, 1 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT, nGridObstructorTextureIndex, 5 )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fRenderScale, 7.05f )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszTextureDensityName,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszTextureVelocityName,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_STRING, pszTextureObstructorName,  )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nDensityTextureId, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nVelocityTextureId, -1 )
	DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_INT_NOSAVE, nObstructorTextureId, -1 )
	DEFINITION_MEMBER_ARRAY ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT,	vLightOffset, 0, 3 )
	//NVTL: for soft particles
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fSoftParticleScale, 0.5  )
    DEFINITION_MEMBER ( PARTICLE_SYSTEM_DEFINITION, DATA_TYPE_FLOAT, fSoftParticleContrast, 2.0  )

DEFINITION_END

class CParticleSystemContainer : public CDefinitionContainer
{
public:
	CParticleSystemContainer() 
	{
		m_pLoader = & sgtDefinitionLoaderParticle;
		m_pszFilePath = FILE_PATH_PARTICLE;
		m_bZeroOutData = FALSE;
		m_bWarnWhenMissing = TRUE;
		m_bAsyncLoad = TRUE;
		m_nLoadPriority = ASYNC_PRIORITY_PARTICLE_DEFINITIONS;
		InitLoader();
	}
	void Free(
		void * data,
		int count) 
	{ 
		m_pLoader->FreeElements(data, count, FALSE);
		
#if USE_MEMORY_MANAGER && !ISVERSION(SERVER_VERSION)
		FREE_DELETE_ARRAY(m_pMemPool, data, PARTICLE_SYSTEM_DEFINITION);
#else	
		FREE_DELETE_ARRAY(NULL, data, PARTICLE_SYSTEM_DEFINITION);
#endif
	}
	void * Alloc(
		int count) 
	{ 
#if USE_MEMORY_MANAGER && !ISVERSION(SERVER_VERSION)
		return MALLOC_NEWARRAY(m_pMemPool, PARTICLE_SYSTEM_DEFINITION, count);
#else	
		return MALLOC_NEWARRAY(NULL, PARTICLE_SYSTEM_DEFINITION, count);
#endif
	}
};

//-------------------------------------------------------------------------------------------------
DEFINITION_START ( ANIM_EVENT, sgtDefinitionLoaderAnimEvent, 'AEVD', FALSE, FALSE, NULL, 0 )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_INT, eType, 0 )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_FLOAT, fTime, 0.0f )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_FLOAT, fRandChance, 1.0f )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_FLOAT, fParam, 0.0f )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_INT,			tAttachmentDef.eType, 0 )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_INT,			tAttachmentDef.dwFlags, 0 )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_INT,			tAttachmentDef.nVolume, 1 )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_STRING,		tAttachmentDef.pszAttached,  )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_INT_DEFAULT,	tAttachmentDef.nAttachedDefId, -1 )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_STRING,		tAttachmentDef.pszBone,  )
	DEFINITION_MEMBER ( ANIM_EVENT, DATA_TYPE_INT_DEFAULT,	tAttachmentDef.nBoneId, -1 )
	DEFINITION_MEMBER_ARRAY ( ANIM_EVENT, DATA_TYPE_FLOAT,	tAttachmentDef.vPosition, 0, 3 )
	DEFINITION_MEMBER_ARRAY ( ANIM_EVENT, DATA_TYPE_FLOAT,	tAttachmentDef.vNormal, 0, 3 )
	DEFINITION_REFERENCE ( ANIM_EVENT, sgtDefinitionLoaderCondition, tCondition )
DEFINITION_END

DEFINITION_START ( ANIMATION_DEFINITION, sgtDefinitionLoaderAnimation, 'ANID', FALSE, FALSE, NULL, 0 )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_INT, dwFlags, 0 )
	DEFINITION_MEMBER_LINK ( ANIMATION_DEFINITION, nUnitMode, DATATABLE_UNITMODES )
	DEFINITION_MEMBER_LINK ( ANIMATION_DEFINITION, nGroup, DATATABLE_ANIMATION_GROUP )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_STRING, pszFile,  )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_INT, nFileIndex, -1 )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_FLOAT, fDuration, 1.0f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_FLOAT, fVelocity, 1.0f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_FLOAT, fStartOffset, 0.0f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_FLOAT, fTurnSpeed, 0.0f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_FLOAT, fEaseIn, 0.0f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_FLOAT, fEaseOut, 0.5f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_FLOAT, fStanceFadeTimePercent, 0.75f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_INT, nBoneWeights, -1 )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_INT, nWeight, 1 )
	DEFINITION_MEMBER_LINK ( ANIMATION_DEFINITION, nStartStance,	DATATABLE_ANIMATION_STANCE )
	DEFINITION_MEMBER_LINK ( ANIMATION_DEFINITION, nStartStance2,	DATATABLE_ANIMATION_STANCE )
	DEFINITION_MEMBER_LINK ( ANIMATION_DEFINITION, nStartStance3,	DATATABLE_ANIMATION_STANCE )
	DEFINITION_MEMBER_LINK ( ANIMATION_DEFINITION, nEndStance,		DATATABLE_ANIMATION_STANCE )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_INT, nPriorityBoost, 0 )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRagdollBlend, 0.0f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tRagdollPower, 0.0f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tSelfIllumation, 1.0f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_PATH_FLOAT_PAIR, tSelfIllumationBlend, 0.0f )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_POINTER_NOSAVE, pBinding, 0 )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_POINTER_NOSAVE, pGrannyAnimation, 0 )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_POINTER_NOSAVE, pGrannyFile, 0 )
	DEFINITION_REFERENCE_VARRAY ( ANIMATION_DEFINITION, sgtDefinitionLoaderAnimEvent, pEvents, nEventCount )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_INT_DEFAULT, nPreviewMode, -1 )
	DEFINITION_MEMBER ( ANIMATION_DEFINITION, DATA_TYPE_POINTER_NOSAVE, pNextInGroup, 0 )
	DEFINITION_MEMBER_LINK_ARRAY( ANIMATION_DEFINITION, nAnimationCondition, DATATABLE_ANIMATION_CONDITION, NUM_ANIMATION_CONDITIONS )
	DEFINITION_REFERENCE ( ANIMATION_DEFINITION, sgtDefinitionLoaderCondition, tCondition )
DEFINITION_END

DEFINITION_START ( INVENTORY_VIEW_INFO, sgtDefinitionLoaderInventoryView, 'INVD', FALSE, FALSE, NULL, 0 )
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_FLOAT, vCamFocus.fX,	0.0f )
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_FLOAT, vCamFocus.fY,	0.0f )
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_FLOAT, vCamFocus.fZ,	0.0f )
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_FLOAT, fCamRotation,	0.0f )
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_FLOAT, fCamPitch,	0.0f )
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_FLOAT, fCamDistance,	3.0f )
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_FLOAT, fCamFOV,		1.047198f )
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_STRING, pszEnvName,	)
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_STRING, pszBoneName,  )
DEFINITION_MEMBER ( INVENTORY_VIEW_INFO, DATA_TYPE_INT_DEFAULT, nBone, -1 )
DEFINITION_END

DEFINITION_START ( APPEARANCE_DEFINITION, sgtDefinitionLoaderAppearance, 'APPD', TRUE, FALSE, AppearanceDefinitionPostXMLLoad, 128 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_DEFAULT, nInitialized, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT, dwFlags, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszModel,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_DEFAULT, nModelDefId, -1 )
#ifdef HAVOK_ENABLED
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_POINTER_NOSAVE, pLoader, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_POINTER_NOSAVE, pMeshBinding, 0 )
#endif
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_POINTER_NOSAVE, pGrannyModel, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_DEFAULT, nBoneCount, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszRagdoll,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszHavokShape,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszSkeleton,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszNeck,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszSpineTop,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszSpineBottom,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszAimBone,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszLeftFootBone,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszRightFootBone,  )
	DEFINITION_MEMBER_ARRAY ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszLeftWeaponBone, , NUM_WEAPON_BONE_TYPES )
	DEFINITION_MEMBER_ARRAY ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszRightWeaponBone, , NUM_WEAPON_BONE_TYPES )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_DEFAULT, nNeck, -1 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_DEFAULT, nSpineTop, -1 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_DEFAULT, nSpineBottom, -1 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_DEFAULT, nAimBone, -1 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, vNeckAim.fX, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, vNeckAim.fY, -1.0f )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, vNeckAim.fZ, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, vAimOffset.fX, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, vAimOffset.fY, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, vAimOffset.fZ, 0 )
	DEFINITION_MEMBER_ARRAY	( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, pvMuzzleOffset, 0, 3 * MAX_WEAPONS_PER_UNIT )
	DEFINITION_MEMBER_LINK ( APPEARANCE_DEFINITION, nWardrobeBaseId, DATATABLE_WARDROBE_LAYER )
	DEFINITION_MEMBER_LINK_ARRAY ( APPEARANCE_DEFINITION, pnWardrobeLayerIds, DATATABLE_WARDROBE_LAYER, MAX_WARDROBE_LAYERS_PER_APPEARANCE )
	DEFINITION_MEMBER_ARRAY ( APPEARANCE_DEFINITION, DATA_TYPE_INT, pnWardrobeLayerParams, 0, MAX_WARDROBE_LAYERS_PER_APPEARANCE )
	DEFINITION_MEMBER_LINK ( APPEARANCE_DEFINITION, nWardrobeAppearanceGroup, DATATABLE_WARDROBE_APPEARANCE_GROUP )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_NOSAVE, fHeadTurnTotalLimit, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT, nHeadTurnTotalLimitDegrees, 100 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_NOSAVE, fHeadTurnBoneLimit, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT, nHeadTurnBoneLimitDegrees, 100 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, fHeadTurnSpeed, 0.05f )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, fHeadTurnPercentVsTorso, 0.5f )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, fTurnSpeed, 0.75f )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, fSpinSpeed, 0.15f )
	DEFINITION_MEMBER_ARRAY		( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszTextureOverrides, , NUM_TEXTURE_TYPES )
	DEFINITION_MEMBER_ARRAY		( APPEARANCE_DEFINITION, DATA_TYPE_INT_DEFAULT, pnTextureOverrides, -1, NUM_TEXTURE_TYPES * LOD_COUNT )	// CHB 2006.11.28
	DEFINITION_REFERENCE_VARRAY ( APPEARANCE_DEFINITION, sgtDefinitionLoaderAnimation, pAnimations, nAnimationCount )
	DEFINITION_REFERENCE ( APPEARANCE_DEFINITION, sgtDefinitionLoaderAnimation, tInitAnimation )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT, dwViewFlags, 0 )
	DEFINITION_MEMBER_LINK ( APPEARANCE_DEFINITION, nWeaponAnimationGroupId, DATATABLE_ANIMATION_GROUP )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_POINTER_NOSAVE, pGrannyFile, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT, nViewCameraMode, 5 )
	DEFINITION_REFERENCE_VARRAY ( APPEARANCE_DEFINITION, sgtDefinitionLoaderInventoryView, pInventoryViews, nInventoryViews )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, fMaxRopeBendXY,		   0.0f )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, fMaxRopeBendZ,		   0.0f )
	DEFINITION_MEMBER_VARRAY ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszBoneNames, ,nBoneCount )
	DEFINITION_MEMBER_VARRAY ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszWeightGroups, ,nWeightGroupCount )
	DEFINITION_MEMBER_VARRAY ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, pfWeights, 0.0f, nWeightCount )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_POINTER_NOSAVE, pAnimGroups, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT_DEFAULT, nAnimGroupCount, 0 )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT, nGrid_FileNameOffset, 0 )	
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszCopyTemplate,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_STRING, pszAnimationFilePrefix,  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, fPreviewScale, 1.0f  )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT, nPreviewHeight, 127 )	
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_INT, nPreviewWeight, 127 )	
	DEFINITION_MEMBER_LINK ( APPEARANCE_DEFINITION, nPreviewWardrobeBody, DATATABLE_WARDROBE_BODY )
	//DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, fLODDistance, 10.0f )
	DEFINITION_MEMBER ( APPEARANCE_DEFINITION, DATA_TYPE_FLOAT, fLODScreensize, -1.0f )
DEFINITION_END

class CAppearanceContainer : public CDefinitionContainer
{
public:
	CAppearanceContainer() 
	{
		m_pLoader = & sgtDefinitionLoaderAppearance;
		m_pszFilePath = FILE_PATH_DATA;
		//m_bZeroOutData = TRUE;
		m_bZeroOutData = FALSE;
		m_bAlwaysWarnWhenMissing = TRUE;
		m_bAsyncLoad = TRUE;
		m_nLoadPriority = ASYNC_PRIORITY_APPEARANCES;
		InitLoader();
	}
	virtual void Free  ( void * pData, int nCount ) 
	{ 
		APPEARANCE_DEFINITION * pAppearances = (APPEARANCE_DEFINITION *)pData;
		for ( int i = 0; i < nCount; i++ )
		{
			AppearanceDefinitionDestroyNonDefData( &pAppearances[ i ], TRUE );
		}
		m_pLoader->FreeElements( pData, nCount, FALSE );
		
#if USE_MEMORY_MANAGER && !ISVERSION(SERVER_VERSION)
		FREE_DELETE_ARRAY(m_pMemPool, pData, APPEARANCE_DEFINITION);
#else
		FREE_DELETE_ARRAY(NULL, pData, APPEARANCE_DEFINITION);
#endif		
	}
	virtual void Copy( void ** ppTarget, void * pSource )
	{
		CDefinitionContainer::Copy( ppTarget, pSource );
		APPEARANCE_DEFINITION* pAppearancesCopy = (APPEARANCE_DEFINITION*)*ppTarget;
		pAppearancesCopy->dwFlags |= APPEARANCE_DEFINITION_FLAG_DEF_COPY;
	}
	virtual void * Alloc ( int nCount ) 
	{ 
#if USE_MEMORY_MANAGER && !ISVERSION(SERVER_VERSION)
		return MALLOC_NEWARRAY( m_pMemPool, APPEARANCE_DEFINITION, nCount ); 
#else
		return MALLOC_NEWARRAY( NULL, APPEARANCE_DEFINITION, nCount ); 
#endif		
	}
};

//-------------------------------------------------------------------------------------------------
DEFINITION_START ( SKILL_EVENT, sgtDefinitionLoaderSkillEvent, 'SEVD', FALSE, FALSE, NULL, 0 )
	DEFINITION_MEMBER_LINK	( SKILL_EVENT, nType, DATATABLE_SKILLEVENTTYPES )
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_LASER_TURNS,					0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_REQUIRES_TARGET,				0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_FORCE_NEW,					0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_LASER_SEEKS_SURFACES,		0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_FACE_TARGET,					0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_UNIT_TARGET,				0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_EVENT_OFFSET,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_LOOP,						0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_EVENT_OFFSET_ABSOLUTE,	0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_PLACE_ON_TARGET,				0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_ANIM_CONTACT_POINT,		0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_TRANSFER_STATS,				0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_DO_WHEN_TARGET_IN_RANGE,		0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_ADD_TO_CENTER,				0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_360_TARGETING,				0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_SKILL_TARGET_LOCATION,	0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_AI_TARGET,				0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_OFFHAND_WEAPON,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_FLOAT,						0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_DONT_VALIDATE_TARGET,		0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_RANDOM_FIRING_DIRECTION,		0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_AUTOAIM_PROJECTILE,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_TARGET_WEAPON,				0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_WEAPON_FOR_CONDITION,	0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_FORCE_CONDITION_ON_EVENT,	0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_HOLY_RADIUS_FOR_RANGE,	0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_USE_CHANCE_PCODE,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_SERVER_ONLY,					0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_CLIENT_ONLY,					0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_LASER_ATTACKS_LOCATION,		0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_AT_NEXT_COOLDOWN,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags, SKILL_EVENT_FLAG_AIM_WITH_WEAPON,				0	)

	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_AIM_WITH_WEAPON_ZERO,		0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_USE_PARAM0_PCODE,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_USE_PARAM1_PCODE,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_USE_PARAM2_PCODE,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_USE_PARAM3_PCODE,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_USE_ULTIMATE_OWNER,			0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_CHARGE_POWER_AND_COOLDOWN,	0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_MARK_SKILL_AS_SUCCESSFUL,	0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_LASER_INCLUDE_IN_UI,		0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_LASER_DONT_TARGET_UNITS,	0	)
	DEFINITION_MEMBER_FLAG( SKILL_EVENT, dwFlags2,SKILL_EVENT_FLAG2_DONT_EXECUTE_STATS,			0	)
	
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT,		fTime, 0.0f )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT,		fRandChance, 1.0f )

	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT,		tParam[0].flValue, 0.0f )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT,		tParam[1].flValue, 0.0f )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT,		tParam[2].flValue, 0.0f )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT,		tParam[3].flValue, 0.0f )
	
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_INT,			tAttachmentDef.eType, 0 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_INT,			tAttachmentDef.dwFlags, 0 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_STRING,		tAttachmentDef.pszAttached,  )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_INT,			tAttachmentDef.nVolume, 1 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_INT_NOSAVE,	tAttachmentDef.nAttachedDefId, -1 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_STRING,		tAttachmentDef.pszBone,  )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_INT_NOSAVE,	tAttachmentDef.nBoneId, -1 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vPosition.fX,  0 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vPosition.fY,  0 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vPosition.fZ,  0 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vNormal.fX, -1 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vNormal.fY,  0 )
	DEFINITION_MEMBER ( SKILL_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vNormal.fZ,  0 )
	DEFINITION_REFERENCE ( SKILL_EVENT, sgtDefinitionLoaderCondition, tCondition )
DEFINITION_END

DEFINITION_START (SKILL_EVENT_HOLDER, sgtDefinitionLoaderSkillEventHolder, 'SEHD', FALSE, FALSE, NULL, 0)
	DEFINITION_MEMBER_LINK		( SKILL_EVENT_HOLDER, nUnitMode, DATATABLE_UNITMODES )
	DEFINITION_MEMBER			( SKILL_EVENT_HOLDER, DATA_TYPE_FLOAT,				 fDuration, 0.0f )
	DEFINITION_REFERENCE_VARRAY ( SKILL_EVENT_HOLDER, sgtDefinitionLoaderSkillEvent, pEvents, nEventCount )
DEFINITION_END

DEFINITION_START (SKILL_EVENTS_DEFINITION, sgtDefinitionLoaderSkillEvents, 'SEDD', TRUE, FALSE, SkillEventsDefinitionPostXMLLoad, 256 )
	DEFINITION_MEMBER ( SKILL_EVENTS_DEFINITION, DATA_TYPE_STRING, 		szPreviewAppearance,    )
	DEFINITION_MEMBER ( SKILL_EVENTS_DEFINITION, DATA_TYPE_INT_NOSAVE, 	nPreviewAppearance, -1  )
	DEFINITION_REFERENCE_VARRAY ( SKILL_EVENTS_DEFINITION, sgtDefinitionLoaderSkillEventHolder, pEventHolders, nEventHolderCount )
DEFINITION_END

class CSkillEventsContainer : public CDefinitionContainer
{
public:
	CSkillEventsContainer() 
	{
		m_pLoader = & sgtDefinitionLoaderSkillEvents;
		m_pszFilePath = FILE_PATH_SKILLS;
		m_bWarnWhenMissing = TRUE;
		InitLoader();
	}
	void Free  ( void * pData, int nCount ) 
	{ 
		m_pLoader->FreeElements( pData, nCount, FALSE );
		FREE( NULL, pData );
	}
	void * Alloc ( int nCount ) 
	{ 
		return MALLOC( NULL, sizeof( SKILL_EVENTS_DEFINITION ) * nCount ); 
	}
};


//-------------------------------------------------------------------------------------------------
DEFINITION_DECLARE(sgtDefinitionLoaderRoomLayoutGroup)

DEFINITION_START ( ROOM_LAYOUT_GROUP, sgtDefinitionLoaderRoomLayoutGroup, 'LAYD', FALSE, FALSE, NULL, 0)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_STRING,					pszName,					)
DEFINITION_MEMBER_LINK ( ROOM_LAYOUT_GROUP,												nTheme,			DATATABLE_LEVEL_THEMES )
DEFINITION_REFERENCE_VARRAY ( ROOM_LAYOUT_GROUP,	sgtDefinitionLoaderRoomLayoutGroup,	pGroups,		nGroupCount	)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT,						eType,			0			)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT,						nWeight,		0			)
DEFINITION_MEMBER_ARRAY ( ROOM_LAYOUT_GROUP,		DATA_TYPE_FLOAT,					vPosition,		0, 3		)
DEFINITION_MEMBER_ARRAY ( ROOM_LAYOUT_GROUP,		DATA_TYPE_FLOAT,					vNormal,		0, 3		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_FLOAT,					fRotation,		0.0f		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT_NOSAVE,				nModelId,		-1			)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT_NOSAVE,				nLayoutId,		INVALID_ID	)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT,						bInitialized,	FALSE		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT,						dwUnitType,		0			)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT,						dwCode,			0			)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT,						nVolume,		0			)
DEFINITION_MEMBER_LINK ( ROOM_LAYOUT_GROUP,												nQuest,			DATATABLE_QUEST )
DEFINITION_MEMBER_FLAG( ROOM_LAYOUT_GROUP,												dwFlags,		ROOM_LAYOUT_FLAG_WEIGHT_PERCENTAGE,		0 )
DEFINITION_MEMBER_FLAG( ROOM_LAYOUT_GROUP,												dwFlags,		ROOM_LAYOUT_FLAG_RANDOM_ROTATIONS,		0 )
DEFINITION_MEMBER_FLAG( ROOM_LAYOUT_GROUP,												dwFlags,		ROOM_LAYOUT_FLAG_AI_NODE_CROUCH,		0 )
DEFINITION_MEMBER_FLAG( ROOM_LAYOUT_GROUP,												dwFlags,		ROOM_LAYOUT_FLAG_AI_NODE_DOORWAY,		0 )
DEFINITION_MEMBER_FLAG( ROOM_LAYOUT_GROUP,												dwFlags,		ROOM_LAYOUT_FLAG_AI_NODE_LARGE_COVER,	0 )
DEFINITION_MEMBER_FLAG( ROOM_LAYOUT_GROUP,												dwFlags,		ROOM_LAYOUT_FLAG_AI_NODE_STONE,			0 )
DEFINITION_MEMBER_FLAG( ROOM_LAYOUT_GROUP,												dwFlags,		ROOM_LAYOUT_FLAG_NOT_THEME,				0 )
DEFINITION_MEMBER_FLAG( ROOM_LAYOUT_GROUP,												dwFlags,		ROOM_LAYOUT_FLAG_NO_THEME,				0 )
DEFINITION_MEMBER_FLAG( ROOM_LAYOUT_GROUP,												dwFlags,		ROOM_LAYOUT_FLAG_EXPANDED,				0 )
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_FLOAT,					fBuffer,		0.0f		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_FLOAT,					fFalloffNear,	0.0f		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_FLOAT,					fFalloffFar,	0.0f		)
DEFINITION_MEMBER_ARRAY ( ROOM_LAYOUT_GROUP,		DATA_TYPE_FLOAT,					vScale,			1.0f, 3		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_FLOAT,					fSpawnClassRadius,	0.0f	)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT,						iSpawnClassExecuteXTimes,1	)

DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT_NOSAVE,				bReadOnly,		FALSE		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT_NOSAVE,				bFollowed,		FALSE		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT_NOSAVE,				bPropIsValid,	FALSE		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT_NOSAVE,				bPropIsChecked,	FALSE		)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP,				DATA_TYPE_INT_NOSAVE,				bDisplayAppearance,	FALSE	)
DEFINITION_END

DEFINITION_START ( ROOM_LAYOUT_GROUP_DEFINITION, sgtDefinitionLoaderRoomLayoutGroupDef, 'LAGD', TRUE, FALSE, RoomLayoutDefinitionPostXMLLoad, 256)
DEFINITION_REFERENCE ( ROOM_LAYOUT_GROUP_DEFINITION,	sgtDefinitionLoaderRoomLayoutGroup,	tGroup								)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP_DEFINITION,		DATA_TYPE_INT,						bShowIcons,		FALSE				)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP_DEFINITION,		DATA_TYPE_INT,						nEditType,		EDIT_TYPE_POLY_PICK	)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP_DEFINITION,		DATA_TYPE_INT,						bExists,		FALSE				)
DEFINITION_MEMBER ( ROOM_LAYOUT_GROUP_DEFINITION,		DATA_TYPE_INT,						bFixup,			FALSE				)

DEFINITION_END

class CRoomLayoutGroupContainer : public CDefinitionContainer
{
public:
	CRoomLayoutGroupContainer() 
	{
		m_pMemPool = NULL;
		m_pLoader = & sgtDefinitionLoaderRoomLayoutGroupDef;
		m_pszFilePath = FILE_PATH_BACKGROUND;
		m_bIgnoreFilePathOnSave = TRUE;
		InitLoader();
	}
	void FreeHelper(ROOM_LAYOUT_GROUP * pLayouts)
	{
		if (pLayouts->nGroupCount && pLayouts->pGroups)
		{
			for(int j=0; j<pLayouts->nGroupCount; j++)
			{
				FreeHelper(&pLayouts->pGroups[j]);
			}
			FREE(m_pMemPool, pLayouts->pGroups);
			pLayouts->pGroups = NULL;
			pLayouts->nGroupCount = 0;
		}
	}
	void Free  ( void * pData, int nCount ) 
	{ 
		ROOM_LAYOUT_GROUP_DEFINITION * pLayouts = (ROOM_LAYOUT_GROUP_DEFINITION *) pData;
		for ( int i = 0; i < nCount; i++ )
		{
			if (pLayouts->bExists)
			{
				FreeHelper(&pLayouts->tGroup);
			}
			pLayouts++;
		}
		FREE( m_pMemPool, pData ); 
	}
	void * Alloc ( int nCount ) { return MALLOC ( m_pMemPool, sizeof( ROOM_LAYOUT_GROUP_DEFINITION ) * nCount ); }
};

//-------------------------------------------------------------------------------------------------
DEFINITION_START ( STATE_EVENT, sgtDefinitionLoaderStateEvent, 'STED', FALSE, FALSE, NULL, 0)
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_FORCE_NEW		, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_FIRST_PERSON		, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_ADD_TO_CENTER	, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_CONTROL_UNIT_ONLY, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_FLOAT			, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_OWNED_BY_CONTROL	, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_SET_IMMEDIATELY	, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_CLEAR_IMMEDIATELY, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_NOT_CONTROL_UNIT	, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_ON_WEAPONS		, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_IGNORE_CAMERA	, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_ON_CLEAR			, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_CHECK_CONDITION_ON_CLEAR, 0 )
	DEFINITION_MEMBER_FLAG( STATE_EVENT, dwFlags, STATE_EVENT_FLAG_SHARE_DURATION	, 0 )
	DEFINITION_MEMBER_LINK ( STATE_EVENT, eType, DATATABLE_STATE_EVENT_TYPES )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_INT,			tAttachmentDef.eType, 0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_INT,			tAttachmentDef.dwFlags, 0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_INT,			tAttachmentDef.nVolume, 1 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_STRING,		tAttachmentDef.pszAttached,  )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_INT_NOSAVE,	tAttachmentDef.nAttachedDefId, -1 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_STRING,		tAttachmentDef.pszBone,  )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_INT_NOSAVE,	tAttachmentDef.nBoneId, -1 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vPosition.fX,  0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vPosition.fY,  0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vPosition.fZ,  0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.fRotation,	0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.fYaw,		0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.fPitch,		0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.fRoll,		0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vNormal.fX, -1 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vNormal.fY,  0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT, 		tAttachmentDef.vNormal.fZ,  0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_STRING,		pszExcelString,  )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_INT_NOSAVE,	nExcelIndex, -1 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_INT,			nData, 0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_FLOAT,		fParam, 0 )
	DEFINITION_MEMBER ( STATE_EVENT, DATA_TYPE_STRING,		pszData, )
	DEFINITION_REFERENCE ( STATE_EVENT, sgtDefinitionLoaderCondition, tCondition )
DEFINITION_END


DEFINITION_START ( STATE_DEFINITION, sgtDefinitionLoaderStates, 'STAD', TRUE, FALSE, StateDefinitionXMLPostLoad, 256)
DEFINITION_REFERENCE_VARRAY ( STATE_DEFINITION, sgtDefinitionLoaderStateEvent, pEvents, nEventCount )
DEFINITION_END

class CStateContainer : public CDefinitionContainer
{
public:
	CStateContainer() 
	{
		m_pLoader = & sgtDefinitionLoaderStates;
		m_pszFilePath = FILE_PATH_STATES;
		InitLoader();
	}
	void Free  ( void * pData, int nCount ) 
	{ 
		STATE_DEFINITION * pStates = (STATE_DEFINITION *) pData;
		for ( int i = 0; i < nCount; i++ )
		{
			if ( pStates->pEvents )
				FREE( m_pMemPool, pStates->pEvents );
			pStates++;
		}
		FREE( m_pMemPool, pData ); 
	}
	void * Alloc ( int nCount ) { return MALLOC ( m_pMemPool, sizeof( STATE_DEFINITION ) * nCount ); }
};


//-------------------------------------------------------------------------------------------------
DEFINITION_DECLARE(sgtDefinitionLoaderAIBehaviorDefinition)

DEFINITION_START ( AI_BEHAVIOR_DEFINITION_TABLE, sgtDefinitionLoaderAIBehaviorDefinitionTable, 'AITA', FALSE, FALSE, NULL, 0)
	DEFINITION_REFERENCE_VARRAY ( AI_BEHAVIOR_DEFINITION_TABLE, sgtDefinitionLoaderAIBehaviorDefinition, pBehaviors, nBehaviorCount )
DEFINITION_END

DEFINITION_START ( AI_BEHAVIOR_DEFINITION, sgtDefinitionLoaderAIBehaviorDefinition, 'AIBE', FALSE, FALSE, NULL, 0)
	DEFINITION_MEMBER ( AI_BEHAVIOR_DEFINITION, DATA_TYPE_FLOAT, fPriority, 0.5 )
	DEFINITION_MEMBER ( AI_BEHAVIOR_DEFINITION, DATA_TYPE_FLOAT, fChance, 1.0 )
	DEFINITION_MEMBER_ARRAY ( AI_BEHAVIOR_DEFINITION, DATA_TYPE_FLOAT, pfParams, 0.0, AI_BEHAVIOR_NUM_PARAMS )
	DEFINITION_MEMBER_LINK ( AI_BEHAVIOR_DEFINITION, nBehaviorId, DATATABLE_AI_BEHAVIOR )
	DEFINITION_MEMBER_LINK ( AI_BEHAVIOR_DEFINITION, nSkillId, DATATABLE_SKILLS )
	DEFINITION_MEMBER_LINK ( AI_BEHAVIOR_DEFINITION, nSkillId2, DATATABLE_SKILLS )
	DEFINITION_MEMBER_LINK ( AI_BEHAVIOR_DEFINITION, nStateId, DATATABLE_STATES )
	DEFINITION_MEMBER_LINK ( AI_BEHAVIOR_DEFINITION, nStatId, DATATABLE_STATS )
	DEFINITION_MEMBER_LINK ( AI_BEHAVIOR_DEFINITION, nSoundId, DATATABLE_SOUNDS )
	DEFINITION_MEMBER_LINK ( AI_BEHAVIOR_DEFINITION, nMonsterId, DATATABLE_SPAWN_CLASS)
	DEFINITION_MEMBER_FLAG( AI_BEHAVIOR_DEFINITION, dwFlags, AI_BEHAVIOR_FLAG_ONCE,				0	)
	DEFINITION_MEMBER_FLAG( AI_BEHAVIOR_DEFINITION, dwFlags, AI_BEHAVIOR_FLAG_RUN,				0	)
	DEFINITION_MEMBER_FLAG( AI_BEHAVIOR_DEFINITION, dwFlags, AI_BEHAVIOR_FLAG_FLY,				0	)
	DEFINITION_MEMBER_FLAG( AI_BEHAVIOR_DEFINITION, dwFlags, AI_BEHAVIOR_FLAG_DONT_STOP,		0	)
	DEFINITION_MEMBER_FLAG( AI_BEHAVIOR_DEFINITION, dwFlags, AI_BEHAVIOR_FLAG_WARP,				0	)
	DEFINITION_MEMBER ( AI_BEHAVIOR_DEFINITION, DATA_TYPE_STRING, pszString,  )
	DEFINITION_REFERENCE ( AI_BEHAVIOR_DEFINITION, sgtDefinitionLoaderAIBehaviorDefinitionTable, tTable )
DEFINITION_END

DEFINITION_START ( AI_DEFINITION, sgtDefinitionLoaderAIDef, 'AIDE', TRUE, FALSE, AIBehaviorPostProcess, 128)
	DEFINITION_REFERENCE ( AI_DEFINITION, sgtDefinitionLoaderAIBehaviorDefinitionTable, tTable )
DEFINITION_END

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
static void sFreeBehaviorTable(
	AI_BEHAVIOR_DEFINITION_TABLE * pTable,
	struct MEMORYPOOL * pMemPool)
{
	for ( int i = 0; i < pTable->nBehaviorCount; i++ )
	{
		if ( pTable->pBehaviors[ i ].tTable.pBehaviors )
			sFreeBehaviorTable( & pTable->pBehaviors[ i ].tTable, pMemPool );
	}
	if ( pTable->pBehaviors )
		FREE( pMemPool, pTable->pBehaviors );
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
class CAIContainer : public CDefinitionContainer
{
public:
	CAIContainer() 
	{
		m_pLoader = & sgtDefinitionLoaderAIDef;
		m_pszFilePath = FILE_PATH_AI;
		m_bWarnWhenMissing = TRUE;
		m_nLoadPriority = ASYNC_PRIORITY_AI_DEFINITIONS;
		InitLoader();
	}
	void Free  ( void * pData, int nCount ) 
	{ 
		AI_DEFINITION * pDef = (AI_DEFINITION *) pData;
		for ( int i = 0; i < nCount; i++ )
		{
			sFreeBehaviorTable( & pDef->tTable, m_pMemPool );
			pDef++;
		}
		FREE( m_pMemPool, pData ); 
	}
	void * Alloc ( int nCount ) { return MALLOC ( m_pMemPool, sizeof( AI_DEFINITION ) * nCount ); }
};

//-------------------------------------------------------------------------------------------------
DEFINITION_DECLARE(sgtDefinitionLoaderRoomPathNode)
DEFINITION_DECLARE(sgtDefinitionLoaderRoomPathNodeConnection)
DEFINITION_DECLARE(sgtDefinitionLoaderRoomPathNodeConnectionRef)

DEFINITION_START(ROOM_PATH_NODE_CONNECTION_REF,	sgtDefinitionLoaderRoomPathNodeConnectionRef, 'PACR', FALSE, FALSE, NULL, 0)
DEFINITION_MEMBER(		ROOM_PATH_NODE_CONNECTION_REF,	DATA_TYPE_INT,									nConnectionIndex,	INVALID_ID	)
DEFINITION_MEMBER(		ROOM_PATH_NODE_CONNECTION_REF,	DATA_TYPE_POINTER_NOSAVE,							pConnection,		NULL	)
DEFINITION_END

DEFINITION_START(ROOM_PATH_NODE_CONNECTION,	sgtDefinitionLoaderRoomPathNodeConnection, 'PACO', FALSE, FALSE, NULL, 0)
DEFINITION_MEMBER(		ROOM_PATH_NODE_CONNECTION,	DATA_TYPE_INT,								nConnectionIndex,	INVALID_ID	)
#if HELLGATE
DEFINITION_MEMBER(		ROOM_PATH_NODE_CONNECTION,	DATA_TYPE_POINTER_NOSAVE,					pConnection,		NULL		)
DEFINITION_MEMBER(		ROOM_PATH_NODE_CONNECTION,	DATA_TYPE_INT,								dwFlags,			0			)
DEFINITION_MEMBER(		ROOM_PATH_NODE_CONNECTION,	DATA_TYPE_FLOAT,							fDistance,			1.0f		)
DEFINITION_MEMBER(		ROOM_PATH_NODE_CONNECTION,	DATA_TYPE_FLOAT,							fHeight,			0.0f		)
#endif
DEFINITION_END

DEFINITION_START(ROOM_PATH_NODE, sgtDefinitionLoaderRoomPathNode, 'PATH', FALSE, FALSE, NULL, 0)
DEFINITION_MEMBER(			ROOM_PATH_NODE,	DATA_TYPE_INT,								nIndex,				INVALID_ID				)
DEFINITION_MEMBER(			ROOM_PATH_NODE,	DATA_TYPE_INT_NOSAVE,						nEdgeIndex,			INVALID_ID				)
#if HELLGATE
DEFINITION_MEMBER_ARRAY(	ROOM_PATH_NODE,	DATA_TYPE_FLOAT,							vPosition,			0.0f, 3					)
DEFINITION_MEMBER_ARRAY(	ROOM_PATH_NODE,	DATA_TYPE_FLOAT,							vNormal,			0.0f, 3					)
DEFINITION_MEMBER(			ROOM_PATH_NODE,	DATA_TYPE_FLOAT,							fHeight,			0.0f					)
DEFINITION_MEMBER(			ROOM_PATH_NODE,	DATA_TYPE_FLOAT,							fRadius,			1.0f					)
#else
DEFINITION_MEMBER(			ROOM_PATH_NODE,	DATA_TYPE_INT,								nOffset,				INVALID_ID				)
#endif
DEFINITION_MEMBER(			ROOM_PATH_NODE,	DATA_TYPE_INT,								dwFlags,			0						)
DEFINITION_REFERENCE_VARRAY(ROOM_PATH_NODE,	sgtDefinitionLoaderRoomPathNodeConnection,	pConnections,		nConnectionCount		)
#if HELLGATE
DEFINITION_REFERENCE_VARRAY(ROOM_PATH_NODE,	sgtDefinitionLoaderRoomPathNodeConnectionRef,pLongConnections,	nLongConnectionCount	)
DEFINITION_REFERENCE_VARRAY(ROOM_PATH_NODE,	sgtDefinitionLoaderRoomPathNodeConnectionRef,pShortConnections,	nShortConnectionCount	)
#endif
DEFINITION_END

DEFINITION_START(ROOM_PATH_NODE_SET, sgtDefinitionLoaderRoomPathNodeSet, 'PANS', FALSE, FALSE, NULL, 0)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_STRING,					pszIndex,						)
DEFINITION_REFERENCE_VARRAY(	ROOM_PATH_NODE_SET,		sgtDefinitionLoaderRoomPathNode,	pPathNodes,		nPathNodeCount	)
DEFINITION_MEMBER_VARRAY(		ROOM_PATH_NODE_SET,		DATA_TYPE_INT,						pHappyNodes, ,	nHappyNodeCount	)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_INT,						dwFlags,		0				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_INT_NOSAVE,				nEdgeNodeCount,	0				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_INT_NOSAVE,				pEdgeNodes,		NULL			)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_FLOAT_NOSAVE,				fMinX,					0.0f	)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_FLOAT_NOSAVE,				fMaxX,					0.0f	)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_FLOAT_NOSAVE,				fMinY,					0.0f	)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_FLOAT_NOSAVE,				fMaxY,					0.0f	)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_INT_NOSAVE,				nArraySize,				0		)
#if HELLGATE_ONLY
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_INT_NOSAVE,				pNodeHashArray,			0		)
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_INT_NOSAVE,				nHashLengths,			0		)
#else
DEFINITION_MEMBER(				ROOM_PATH_NODE_SET,		DATA_TYPE_INT_NOSAVE,				pNodeIndexMap,			0		)
#endif
DEFINITION_END

DEFINITION_START(ROOM_PATH_NODE_DEFINITION,	sgtDefinitionLoaderRoomPathNodeDef, 'PADE', TRUE, FALSE, RoomPathNodeDefinitionPostXMLLoad, 512)
DEFINITION_REFERENCE_VARRAY(	ROOM_PATH_NODE_DEFINITION,	sgtDefinitionLoaderRoomPathNodeSet,	pPathNodeSets,	nPathNodeSetCount			)
DEFINITION_MEMBER_FLAG(			ROOM_PATH_NODE_DEFINITION,	dwFlags,							ROOM_PATH_NODE_DEF_INDOOR_FLAG,			0	)
DEFINITION_MEMBER_FLAG(			ROOM_PATH_NODE_DEFINITION,	dwFlags,							ROOM_PATH_NODE_DEF_NO_PATHNODES_FLAG,	0	)
DEFINITION_MEMBER_FLAG(			ROOM_PATH_NODE_DEFINITION,	dwFlags,							ROOM_PATH_NODE_DEF_USE_TUGBOAT,			0	)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT,					fRadius,				1.5f				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT,					fNodeFrequencyX,		1.0f				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT,					fNodeFrequencyY,		1.0f				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT_NOSAVE,				fDiagDistBetweenNodesSq,1.0f				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT_NOSAVE,				fDiagDistBetweenNodes,	1.0f				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT,					fNodeOffsetX,			0.0f				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT,					fNodeOffsetY,			0.0f				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_INT,						bExists,				FALSE				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT,					fNodeMinZ,				-.5f				)
DEFINITION_MEMBER(				ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT,					fNodeMaxZ,				0.5f				)
DEFINITION_MEMBER_ARRAY(		ROOM_PATH_NODE_DEFINITION,	DATA_TYPE_FLOAT,					vCorner,				0.0f, 3					)
DEFINITION_END

class CRoomPathNodeContainer : public CDefinitionContainer
{
public:
	CRoomPathNodeContainer() 
	{
		m_pLoader = & sgtDefinitionLoaderRoomPathNodeDef;
		m_pszFilePath = FILE_PATH_BACKGROUND;
		m_bIgnoreFilePathOnSave = TRUE;
		if (!AppIsHammer())
		{
			m_pMemPool = g_ScratchAllocator;
		}
		InitLoader();		
	}
	void Free  ( void * pData, int nCount ) 
	{ 
	
		ROOM_PATH_NODE_DEFINITION * pPathNodes = (ROOM_PATH_NODE_DEFINITION *) pData;

		for ( int i = 0; i < nCount; i++ )
		{
			if ( pPathNodes->pPathNodeSets )
			{
				for(int j=0; j<pPathNodes->nPathNodeSetCount; j++)
				{
					if (pPathNodes->pPathNodeSets[j].pPathNodes)
					{
						for(int k=0; k<pPathNodes->pPathNodeSets[j].nPathNodeCount; k++)
						{
							// now just a pointer to another block of memory that will be freed by the pathnodeset.
							if (pPathNodes->pPathNodeSets[j].pPathNodes[k].pConnections)
							{
								pPathNodes->pPathNodeSets[j].pPathNodes[k].pConnections = NULL;
							}
#if HELLGATE_ONLY
							if (pPathNodes->pPathNodeSets[j].pPathNodes[k].pLongConnections)
							{
								FREE(g_StaticAllocator, pPathNodes->pPathNodeSets[j].pPathNodes[k].pLongConnections);
								pPathNodes->pPathNodeSets[j].pPathNodes[k].pLongConnections = NULL;
							}
							if (pPathNodes->pPathNodeSets[j].pPathNodes[k].pShortConnections)
							{
								FREE(g_StaticAllocator, pPathNodes->pPathNodeSets[j].pPathNodes[k].pShortConnections);
								pPathNodes->pPathNodeSets[j].pPathNodes[k].pShortConnections = NULL;
							}
#endif
						}
						FREE( g_StaticAllocator, pPathNodes->pPathNodeSets[j].pPathNodes );
						pPathNodes->pPathNodeSets[j].pPathNodes = NULL;
					}
					if (pPathNodes->pPathNodeSets[j].pEdgeNodes)
					{
						FREE( g_StaticAllocator, pPathNodes->pPathNodeSets[j].pEdgeNodes );
						pPathNodes->pPathNodeSets[j].pEdgeNodes = NULL;
					}
#if HELLGATE_ONLY
					if(pPathNodes->pPathNodeSets[j].nHashLengths)
					{
						FREE( g_StaticAllocator, pPathNodes->pPathNodeSets[j].nHashLengths );
						pPathNodes->pPathNodeSets[j].nHashLengths = NULL;
					}
					if(pPathNodes->pPathNodeSets[j].pNodeHashArray)
					{

						FREE( g_StaticAllocator, pPathNodes->pPathNodeSets[j].pNodeHashArray );
						pPathNodes->pPathNodeSets[j].pNodeHashArray = NULL;
					}
#else
					if(pPathNodes->pPathNodeSets[j].pNodeIndexMap)
					{
						FREE( g_StaticAllocator, pPathNodes->pPathNodeSets[j].pNodeIndexMap );
						pPathNodes->pPathNodeSets[j].pNodeIndexMap = NULL;
					}
#endif
					if (pPathNodes->pPathNodeSets[j].pConnections)
					{
						FREE(g_StaticAllocator, pPathNodes->pPathNodeSets[j].pConnections);
						pPathNodes->pPathNodeSets[j].pConnections = NULL;
					}
				}
				FREE( g_StaticAllocator, pPathNodes->pPathNodeSets );
				pPathNodes->pPathNodeSets = NULL;
			}
			pPathNodes++;
		}
		FREE( g_StaticAllocator, pData ); 
	}
	void * Alloc ( int nCount ) { return MALLOC ( g_StaticAllocator, sizeof( ROOM_PATH_NODE_DEFINITION ) * nCount ); }
};


//-------------------------------------------------------------------------------------------------
DEFINITION_START(COLOR_DEFINITION, sgtDefinitionLoaderColorDef, 'COLS', FALSE, FALSE, NULL, 0)
	DEFINITION_MEMBER_LINK	( COLOR_DEFINITION,						nId,			DATATABLE_COLORSETS				  )
	DEFINITION_MEMBER_LINK	( COLOR_DEFINITION,						nUnittype,		DATATABLE_UNITTYPES				  )
	DEFINITION_MEMBER_ARRAY ( COLOR_DEFINITION, DATA_TYPE_INT,		pdwColors,		0xFFFFFFFF, COLOR_SET_COLOR_COUNT )
DEFINITION_END


DEFINITION_START(COLOR_SET_DEFINITION, sgtDefinitionLoaderColorSets, 'COLO', TRUE, FALSE, ColorSetDefinitionPostXMLLoad, 4)
DEFINITION_REFERENCE_VARRAY ( COLOR_SET_DEFINITION, sgtDefinitionLoaderColorDef, pColorDefinitions, nColorDefinitionCount )
DEFINITION_END

class CColorSetContainer : public CDefinitionContainer
{
public:
	CColorSetContainer() 
	{
		m_pLoader = & sgtDefinitionLoaderColorSets;
		m_pszFilePath = FILE_PATH_DATA;
		InitLoader();
	}
	void Free  ( void * pData, int nCount ) 
	{ 
		COLOR_SET_DEFINITION * pColorSets = (COLOR_SET_DEFINITION *) pData;
		for ( int i = 0; i < nCount; i++ )
		{
			if ( pColorSets->pColorDefinitions )
				FREE( m_pMemPool, pColorSets->pColorDefinitions );
			pColorSets++;
		}
		FREE( m_pMemPool, pData ); 
	}
	void * Alloc ( int nCount ) { return MALLOC ( m_pMemPool, sizeof( COLOR_SET_DEFINITION ) * nCount ); }
};


//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
DEFINITION_START ( DEMO_LEVEL_DEFINITION, sgtDefinitionLoaderDemoLevel, 'DEMO', TRUE, TRUE, NULL, 1 )
DEFINITION_MEMBER(			DEMO_LEVEL_DEFINITION, DATA_TYPE_INT,	dwFlags,				0						)
DEFINITION_MEMBER_LINK(		DEMO_LEVEL_DEFINITION,					nLevelDefinition,		DATATABLE_LEVEL			)
DEFINITION_MEMBER_LINK(		DEMO_LEVEL_DEFINITION,					nDRLGDefinition,		DATATABLE_LEVEL_DRLGS	)
DEFINITION_MEMBER(			DEMO_LEVEL_DEFINITION, DATA_TYPE_INT,	dwDRLGSeed,				1						)
DEFINITION_MEMBER(			DEMO_LEVEL_DEFINITION, DATA_TYPE_INT,	nCameraType,			DLCT_DEFAULT			)
DEFINITION_MEMBER(			DEMO_LEVEL_DEFINITION, DATA_TYPE_FLOAT,	fMetersPerSecond,		5.0f					)
DEFINITION_END

class CDemoLevelContainer : public CDefinitionContainer
{
public:
	CDemoLevelContainer() 
	{
		m_pLoader = &sgtDefinitionLoaderDemoLevel;
		m_pszFilePath = FILE_PATH_DEMOLEVEL;
		//m_bAlwaysLoadDirect = TRUE;
		InitLoader();
	}
	void Free( 
		void * data,
		int count) 
	{ 
		REF(count);
		FREE_DELETE_ARRAY(m_pMemPool, data, DEMO_LEVEL_DEFINITION); 
	}
	void * Alloc( 
		int count) 
	{
		return MALLOC_NEWARRAY(m_pMemPool, DEMO_LEVEL_DEFINITION, count); 
	}
};


// ************************************************************************************************
//
// --- Definition Functions --- 
//
// ************************************************************************************************

extern CDefinitionContainer * gppDefinitionContainers[];



//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

#if ISVERSION(DEVELOPMENT)

static void sCheckResult( const char * szFirstFunc, const char * szFirstName, int nFirstID, const char * szFunc, const char * szName, int nNewID, BOOL bShouldMatch )
{
	if ( bShouldMatch )
	{
		ASSERTV( nFirstID == nNewID, "Definition Unit Test failed!  IDs for two definition gets were expected to match!\n\n%s(\"%s\")\n%s(\"%s\")\n", szFirstFunc, szFirstName, szFunc, szName );
	}
	else
	{
		ASSERTV( nFirstID != nNewID, "Definition Unit Test failed!  IDs for two definition gets weren't expected to match!\n\n%s(\"%s\")\n%s(\"%s\")\n", szFirstFunc, szFirstName, szFunc, szName );
	}
}

// CML 2008.05.06 - Unit test to ensure that multiple loads of the same definition by different names and methods don't result in new definitions when they shouldn't.
static void sDefinitionTestGetByNameFunctions()
{
	DEFINITION_GROUP_TYPE eDefinitionGroup = DEFINITION_GROUP_TEXTURE;
	int nRootLen = 0;
	const OS_PATH_CHAR * poszRoot = AppCommonGetRootDirectory( &nRootLen );
	char szRoot[DEFAULT_FILE_WITH_PATH_SIZE];
	PStrCvt( szRoot, poszRoot, DEFAULT_FILE_WITH_PATH_SIZE );
	char szTemp[DEFAULT_FILE_WITH_PATH_SIZE];
	const char szGETBYNAME[] = "GetByName";
	const char szGETBYFILENAME[] = "GetByFilename";

	const char szFirstName[] = "units\\testdir\\testfile.xml";
	int nFirstID = DefinitionGetIdByName( eDefinitionGroup, szFirstName );

	{
		const char szName[] = "units\\testdir\\testfile.xml";
		int nNewID = DefinitionGetIdByName( eDefinitionGroup, szName );
		sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYNAME, szName, nNewID, TRUE );
	}

	{
		const char szName[] = "units/testdir\\testfile.xml";
		int nNewID = DefinitionGetIdByName( eDefinitionGroup, szName );
		sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYNAME, szName, nNewID, TRUE );
	}

	{
		const char szName[] = "UNITS\\testdir\\TestFile.xml";
		int nNewID = DefinitionGetIdByName( eDefinitionGroup, szName );
		sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYNAME, szName, nNewID, TRUE );
	}

	{
		const char szName[] = "units/testdir/testfile.xml";
		int nNewID = DefinitionGetIdByName( eDefinitionGroup, szName );
		sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYNAME, szName, nNewID, TRUE );
	}

	{
		const char szName[] = "units\\testdir\\testfile";
		int nNewID = DefinitionGetIdByName( eDefinitionGroup, szName );
		sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYNAME, szName, nNewID, TRUE );
	}

	{
		const char szName[] = "units\\testdir\\testfile.xml";
		PStrPrintf( szTemp, DEFAULT_FILE_WITH_PATH_SIZE, "%s%s", FILE_PATH_DATA, szName );
		int nNewID = DefinitionGetIdByName( eDefinitionGroup, szTemp );
		sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYNAME, szTemp, nNewID, TRUE );
	}

	{
		const char szName[] = "units\\testdir\\testfile.xml";
		int nNewID = DefinitionGetIdByFilename( eDefinitionGroup, szName );
		sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYFILENAME, szName, nNewID, FALSE );
	}

	{
		const char szName[] = "units\\testdir\\testfile.xml";
		PStrPrintf( szTemp, DEFAULT_FILE_WITH_PATH_SIZE, "%s%s", FILE_PATH_DATA, szName );
		int nNewID = DefinitionGetIdByFilename( eDefinitionGroup, szTemp );
		sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYFILENAME, szTemp, nNewID, TRUE );
	}

	// This test is expected to fail.  It triggers an assertion (as designed) inside the definition system complaining about the "..".
	//{
	//	const char szName[] = "data\\units\\..\\units\\testdir\\testfile.xml";
	//	int nNewID = DefinitionGetIdByFilename( eDefinitionGroup, szName );
	//	sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYFILENAME, szName, nNewID, TRUE );
	//}

	{
		const char szName[] = "units\\testdir\\testfile.xml";
		PStrPrintf( szTemp, DEFAULT_FILE_WITH_PATH_SIZE, "%s%s%s", szRoot, FILE_PATH_DATA, szName );
		int nNewID = DefinitionGetIdByFilename( eDefinitionGroup, szTemp );
		sCheckResult( szGETBYNAME, szFirstName, nFirstID, szGETBYFILENAME, szTemp, nNewID, TRUE );
	}
}

#endif // DEVELOPMENT


//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

void CDefinitionContainer::Init ( void )
{
	ZeroMemory( gppDefinitionContainers, sizeof(CDefinitionContainer *) * NUM_DEFINITION_GROUPS );

	if (AppGetType() == APP_TYPE_CLOSED_SERVER)
	{
		DefinitionForceNoAsync();
	}

	InitCommon();
	DefinitionContainerGetRef( DEFINITION_GROUP_APPEARANCE					) = new CAppearanceContainer;
	DefinitionContainerGetRef( DEFINITION_GROUP_SKILL_EVENTS				) = new CSkillEventsContainer;
	DefinitionContainerGetRef( DEFINITION_GROUP_STATES						) = new CStateContainer;
	DefinitionContainerGetRef( DEFINITION_GROUP_ROOM_LAYOUT					) = new CRoomLayoutGroupContainer;
	DefinitionContainerGetRef( DEFINITION_GROUP_AI							) = new CAIContainer;
	DefinitionContainerGetRef( DEFINITION_GROUP_PARTICLE 					) = new CParticleSystemContainer;
	DefinitionContainerGetRef( DEFINITION_GROUP_GAME_GLOBAL					) = new CGameGlobalContainer;
	DefinitionContainerGetRef( DEFINITION_GROUP_ROOM_PATH_NODE				) = new CRoomPathNodeContainer;
	DefinitionContainerGetRef( DEFINITION_GROUP_COLOR_SET					) = new CColorSetContainer;
	DefinitionContainerGetRef( DEFINITION_GROUP_DEMO_LEVEL					) = new CDemoLevelContainer;

#if !ISVERSION(SERVER_VERSION)
	DefinitionInitEngine();
	DefinitionInitSound();
#endif //ISVERSION(SERVER_VERSION)
	for ( int i = 0; i < NUM_DEFINITION_GROUPS; i++ )
	{
		CDefinitionContainer * pContainer = gppDefinitionContainers[ i ];
		if ( pContainer )
			pContainer->SetDefinitionGroup( i );
	}

#if ISVERSION(DEVELOPMENT)
	//sDefinitionTestGetByNameFunctions();
#endif // DEVELOPMENT
}
